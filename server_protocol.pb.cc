// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_protocol.proto

#include "server_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Notation_element::Notation_element(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct Notation_elementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Notation_elementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Notation_elementDefaultTypeInternal() {}
  union {
    Notation_element _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Notation_elementDefaultTypeInternal _Notation_element_default_instance_;
PROTOBUF_CONSTEXPR Command_Prop::Command_Prop(
    ::_pbi::ConstantInitialized){}
struct Command_PropDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_PropDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_PropDefaultTypeInternal() {}
  union {
    Command_Prop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_PropDefaultTypeInternal _Command_Prop_default_instance_;
PROTOBUF_CONSTEXPR Command_File::Command_File(
    ::_pbi::ConstantInitialized)
  : filename_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mode_(0)
{}
struct Command_FileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_FileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_FileDefaultTypeInternal() {}
  union {
    Command_File _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_FileDefaultTypeInternal _Command_File_default_instance_;
PROTOBUF_CONSTEXPR Command_Keep_notations::Command_Keep_notations(
    ::_pbi::ConstantInitialized){}
struct Command_Keep_notationsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_Keep_notationsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_Keep_notationsDefaultTypeInternal() {}
  union {
    Command_Keep_notations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_Keep_notationsDefaultTypeInternal _Command_Keep_notations_default_instance_;
PROTOBUF_CONSTEXPR Command_Expand_notations::Command_Expand_notations(
    ::_pbi::ConstantInitialized){}
struct Command_Expand_notationsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_Expand_notationsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_Expand_notationsDefaultTypeInternal() {}
  union {
    Command_Expand_notations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_Expand_notationsDefaultTypeInternal _Command_Expand_notations_default_instance_;
PROTOBUF_CONSTEXPR Command_Compiled::Command_Compiled(
    ::_pbi::ConstantInitialized){}
struct Command_CompiledDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_CompiledDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_CompiledDefaultTypeInternal() {}
  union {
    Command_Compiled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_CompiledDefaultTypeInternal _Command_Compiled_default_instance_;
PROTOBUF_CONSTEXPR Command_Interpreted::Command_Interpreted(
    ::_pbi::ConstantInitialized){}
struct Command_InterpretedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_InterpretedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_InterpretedDefaultTypeInternal() {}
  union {
    Command_Interpreted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_InterpretedDefaultTypeInternal _Command_Interpreted_default_instance_;
PROTOBUF_CONSTEXPR Command_First_order::Command_First_order(
    ::_pbi::ConstantInitialized){}
struct Command_First_orderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_First_orderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_First_orderDefaultTypeInternal() {}
  union {
    Command_First_order _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_First_orderDefaultTypeInternal _Command_First_order_default_instance_;
PROTOBUF_CONSTEXPR Command_Notation::Command_Notation(
    ::_pbi::ConstantInitialized)
  : params_()
  , syntax_()
  , semantics_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct Command_NotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_NotationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_NotationDefaultTypeInternal() {}
  union {
    Command_Notation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_NotationDefaultTypeInternal _Command_Notation_default_instance_;
PROTOBUF_CONSTEXPR Command_Theorem::Command_Theorem(
    ::_pbi::ConstantInitialized)
  : params_()
  , premisses_()
  , demonstration_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , conclusion_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(0)
{}
struct Command_TheoremDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_TheoremDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_TheoremDefaultTypeInternal() {}
  union {
    Command_Theorem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_TheoremDefaultTypeInternal _Command_Theorem_default_instance_;
PROTOBUF_CONSTEXPR Command_Axiom::Command_Axiom(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , formula_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct Command_AxiomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_AxiomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_AxiomDefaultTypeInternal() {}
  union {
    Command_Axiom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_AxiomDefaultTypeInternal _Command_Axiom_default_instance_;
PROTOBUF_CONSTEXPR Command_History::Command_History(
    ::_pbi::ConstantInitialized){}
struct Command_HistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_HistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_HistoryDefaultTypeInternal() {}
  union {
    Command_History _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_HistoryDefaultTypeInternal _Command_History_default_instance_;
PROTOBUF_CONSTEXPR Command_Quit::Command_Quit(
    ::_pbi::ConstantInitialized){}
struct Command_QuitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_QuitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_QuitDefaultTypeInternal() {}
  union {
    Command_Quit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_QuitDefaultTypeInternal _Command_Quit_default_instance_;
PROTOBUF_CONSTEXPR Command::Command(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct CommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDefaultTypeInternal() {}
  union {
    Command _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDefaultTypeInternal _Command_default_instance_;
PROTOBUF_CONSTEXPR Answer_Ok::Answer_Ok(
    ::_pbi::ConstantInitialized){}
struct Answer_OkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Answer_OkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Answer_OkDefaultTypeInternal() {}
  union {
    Answer_Ok _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Answer_OkDefaultTypeInternal _Answer_Ok_default_instance_;
PROTOBUF_CONSTEXPR Answer_Error::Answer_Error(
    ::_pbi::ConstantInitialized)
  : error_message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , command_(nullptr){}
struct Answer_ErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Answer_ErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Answer_ErrorDefaultTypeInternal() {}
  union {
    Answer_Error _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Answer_ErrorDefaultTypeInternal _Answer_Error_default_instance_;
PROTOBUF_CONSTEXPR Answer::Answer(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct AnswerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnswerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnswerDefaultTypeInternal() {}
  union {
    Answer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnswerDefaultTypeInternal _Answer_default_instance_;
static ::_pb::Metadata file_level_metadata_server_5fprotocol_2eproto[17];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_server_5fprotocol_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_server_5fprotocol_2eproto = nullptr;

const uint32_t TableStruct_server_5fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Notation_element, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Notation_element, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Notation_element, t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Prop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_File, mode_),
  PROTOBUF_FIELD_OFFSET(::Command_File, filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Keep_notations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Expand_notations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Compiled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Interpreted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_First_order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Notation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_Notation, name_),
  PROTOBUF_FIELD_OFFSET(::Command_Notation, params_),
  PROTOBUF_FIELD_OFFSET(::Command_Notation, syntax_),
  PROTOBUF_FIELD_OFFSET(::Command_Notation, semantics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Theorem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_Theorem, name_),
  PROTOBUF_FIELD_OFFSET(::Command_Theorem, params_),
  PROTOBUF_FIELD_OFFSET(::Command_Theorem, premisses_),
  PROTOBUF_FIELD_OFFSET(::Command_Theorem, conclusion_),
  PROTOBUF_FIELD_OFFSET(::Command_Theorem, demonstration_),
  PROTOBUF_FIELD_OFFSET(::Command_Theorem, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Axiom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_Axiom, name_),
  PROTOBUF_FIELD_OFFSET(::Command_Axiom, formula_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_History, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Quit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Command, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Command, t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Answer_Ok, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Answer_Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Answer_Error, error_message_),
  PROTOBUF_FIELD_OFFSET(::Answer_Error, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Answer, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Answer, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Answer, t_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Notation_element)},
  { 9, -1, -1, sizeof(::Command_Prop)},
  { 15, -1, -1, sizeof(::Command_File)},
  { 23, -1, -1, sizeof(::Command_Keep_notations)},
  { 29, -1, -1, sizeof(::Command_Expand_notations)},
  { 35, -1, -1, sizeof(::Command_Compiled)},
  { 41, -1, -1, sizeof(::Command_Interpreted)},
  { 47, -1, -1, sizeof(::Command_First_order)},
  { 53, -1, -1, sizeof(::Command_Notation)},
  { 63, -1, -1, sizeof(::Command_Theorem)},
  { 75, -1, -1, sizeof(::Command_Axiom)},
  { 83, -1, -1, sizeof(::Command_History)},
  { 89, -1, -1, sizeof(::Command_Quit)},
  { 95, -1, -1, sizeof(::Command)},
  { 118, -1, -1, sizeof(::Answer_Ok)},
  { 124, -1, -1, sizeof(::Answer_Error)},
  { 132, -1, -1, sizeof(::Answer)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Notation_element_default_instance_._instance,
  &::_Command_Prop_default_instance_._instance,
  &::_Command_File_default_instance_._instance,
  &::_Command_Keep_notations_default_instance_._instance,
  &::_Command_Expand_notations_default_instance_._instance,
  &::_Command_Compiled_default_instance_._instance,
  &::_Command_Interpreted_default_instance_._instance,
  &::_Command_First_order_default_instance_._instance,
  &::_Command_Notation_default_instance_._instance,
  &::_Command_Theorem_default_instance_._instance,
  &::_Command_Axiom_default_instance_._instance,
  &::_Command_History_default_instance_._instance,
  &::_Command_Quit_default_instance_._instance,
  &::_Command_default_instance_._instance,
  &::_Answer_Ok_default_instance_._instance,
  &::_Answer_Error_default_instance_._instance,
  &::_Answer_default_instance_._instance,
};

const char descriptor_table_protodef_server_5fprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025server_protocol.proto\":\n\020Notation_elem"
  "ent\022\017\n\005param\030\001 \001(\tH\000\022\020\n\006string\030\002 \001(\tH\000B\003"
  "\n\001t\"\374\007\n\007Command\022\021\n\007verbose\030\001 \001(\005H\000\022\035\n\004pr"
  "op\030\002 \001(\0132\r.Command.PropH\000\0221\n\016keep_notati"
  "ons\030\003 \001(\0132\027.Command.Keep_notationsH\000\0225\n\020"
  "expand_notations\030\004 \001(\0132\031.Command.Expand_"
  "notationsH\000\022%\n\010compiled\030\005 \001(\0132\021.Command."
  "CompiledH\000\022+\n\013interpreted\030\006 \001(\0132\024.Comman"
  "d.InterpretedH\000\022\035\n\004save\030\007 \001(\0132\r.Command."
  "FileH\000\022\035\n\004load\030\010 \001(\0132\r.Command.FileH\000\022+\n"
  "\013first_order\030\t \001(\0132\024.Command.First_order"
  "H\000\022%\n\010notation\030\n \001(\0132\021.Command.NotationH"
  "\000\022#\n\007theorem\030\013 \001(\0132\020.Command.TheoremH\000\022\037"
  "\n\005axiom\030\014 \001(\0132\016.Command.AxiomH\000\022#\n\007histo"
  "ry\030\r \001(\0132\020.Command.HistoryH\000\022\016\n\004show\030\016 \001"
  "(\tH\000\022\026\n\004list\030\017 \001(\0162\006.KnownH\000\022\035\n\004quit\030\020 \001"
  "(\0132\r.Command.QuitH\000\032\006\n\004Prop\0322\n\004File\022\030\n\004m"
  "ode\030\001 \001(\0162\n.File_mode\022\020\n\010filename\030\002 \001(\t\032"
  "\020\n\016Keep_notations\032\022\n\020Expand_notations\032\n\n"
  "\010Compiled\032\r\n\013Interpreted\032\r\n\013First_order\032"
  "q\n\010Notation\022\014\n\004name\030\001 \001(\t\022\016\n\006params\030\002 \003("
  "\t\022!\n\006syntax\030\003 \003(\0132\021.Notation_element\022$\n\t"
  "semantics\030\004 \003(\0132\021.Notation_element\032~\n\007Th"
  "eorem\022\014\n\004name\030\001 \001(\t\022\016\n\006params\030\002 \003(\t\022\021\n\tp"
  "remisses\030\003 \003(\t\022\022\n\nconclusion\030\004 \001(\t\022\025\n\rde"
  "monstration\030\005 \003(\t\022\027\n\006status\030\006 \001(\0162\007.Stat"
  "us\032&\n\005Axiom\022\014\n\004name\030\001 \001(\t\022\017\n\007formula\030\002 \001"
  "(\t\032\t\n\007History\032\006\n\004QuitB\003\n\001t\"\232\001\n\006Answer\022\030\n"
  "\002ok\030\001 \001(\0132\n.Answer.OkH\000\022\036\n\005error\030\002 \001(\0132\r"
  ".Answer.ErrorH\000\022\020\n\006answer\030\003 \001(\tH\000\032\004\n\002Ok\032"
  "9\n\005Error\022\025\n\rerror_message\030\001 \001(\t\022\031\n\007comma"
  "nd\030\002 \001(\0132\010.CommandB\003\n\001t*!\n\tFile_mode\022\010\n\004"
  "TEXT\020\000\022\n\n\006BINARY\020\001*2\n\006Status\022\016\n\nUNVERIFI"
  "ED\020\000\022\014\n\010VERIFIED\020\001\022\n\n\006UNTRUE\020\002*!\n\005Known\022"
  "\n\n\006AXIOMS\020\000\022\014\n\010THEOREMS\020\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_server_5fprotocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_server_5fprotocol_2eproto = {
    false, false, 1393, descriptor_table_protodef_server_5fprotocol_2eproto,
    "server_protocol.proto",
    &descriptor_table_server_5fprotocol_2eproto_once, nullptr, 0, 17,
    schemas, file_default_instances, TableStruct_server_5fprotocol_2eproto::offsets,
    file_level_metadata_server_5fprotocol_2eproto, file_level_enum_descriptors_server_5fprotocol_2eproto,
    file_level_service_descriptors_server_5fprotocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_server_5fprotocol_2eproto_getter() {
  return &descriptor_table_server_5fprotocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_server_5fprotocol_2eproto(&descriptor_table_server_5fprotocol_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* File_mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_5fprotocol_2eproto);
  return file_level_enum_descriptors_server_5fprotocol_2eproto[0];
}
bool File_mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_5fprotocol_2eproto);
  return file_level_enum_descriptors_server_5fprotocol_2eproto[1];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Known_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_5fprotocol_2eproto);
  return file_level_enum_descriptors_server_5fprotocol_2eproto[2];
}
bool Known_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Notation_element::_Internal {
 public:
};

Notation_element::Notation_element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Notation_element)
}
Notation_element::Notation_element(const Notation_element& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_t();
  switch (from.t_case()) {
    case kParam: {
      _internal_set_param(from._internal_param());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case T_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Notation_element)
}

inline void Notation_element::SharedCtor() {
clear_has_t();
}

Notation_element::~Notation_element() {
  // @@protoc_insertion_point(destructor:Notation_element)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Notation_element::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_t()) {
    clear_t();
  }
}

void Notation_element::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Notation_element::clear_t() {
// @@protoc_insertion_point(one_of_clear_start:Notation_element)
  switch (t_case()) {
    case kParam: {
      t_.param_.Destroy();
      break;
    }
    case kString: {
      t_.string_.Destroy();
      break;
    }
    case T_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = T_NOT_SET;
}


void Notation_element::Clear() {
// @@protoc_insertion_point(message_clear_start:Notation_element)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_t();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Notation_element::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_param();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Notation_element.param"));
        } else
          goto handle_unusual;
        continue;
      // string string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Notation_element.string"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Notation_element::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Notation_element)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string param = 1;
  if (_internal_has_param()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_param().data(), static_cast<int>(this->_internal_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Notation_element.param");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_param(), target);
  }

  // string string = 2;
  if (_internal_has_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Notation_element.string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Notation_element)
  return target;
}

size_t Notation_element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Notation_element)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (t_case()) {
    // string param = 1;
    case kParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param());
      break;
    }
    // string string = 2;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
      break;
    }
    case T_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Notation_element::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Notation_element::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Notation_element::GetClassData() const { return &_class_data_; }

void Notation_element::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Notation_element *>(to)->MergeFrom(
      static_cast<const Notation_element &>(from));
}


void Notation_element::MergeFrom(const Notation_element& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Notation_element)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.t_case()) {
    case kParam: {
      _internal_set_param(from._internal_param());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case T_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Notation_element::CopyFrom(const Notation_element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Notation_element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notation_element::IsInitialized() const {
  return true;
}

void Notation_element::InternalSwap(Notation_element* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(t_, other->t_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Notation_element::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fprotocol_2eproto_getter, &descriptor_table_server_5fprotocol_2eproto_once,
      file_level_metadata_server_5fprotocol_2eproto[0]);
}

// ===================================================================

class Command_Prop::_Internal {
 public:
};

Command_Prop::Command_Prop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Command.Prop)
}
Command_Prop::Command_Prop(const Command_Prop& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Command.Prop)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Prop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Prop::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Command_Prop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fprotocol_2eproto_getter, &descriptor_table_server_5fprotocol_2eproto_once,
      file_level_metadata_server_5fprotocol_2eproto[1]);
}

// ===================================================================

class Command_File::_Internal {
 public:
};

Command_File::Command_File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Command.File)
}
Command_File::Command_File(const Command_File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    filename_.Set(from._internal_filename(), 
      GetArenaForAllocation());
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:Command.File)
}

inline void Command_File::SharedCtor() {
filename_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mode_ = 0;
}

Command_File::~Command_File() {
  // @@protoc_insertion_point(destructor:Command.File)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_File::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.Destroy();
}

void Command_File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Command_File::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.File)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_File::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .File_mode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::File_mode>(val));
        } else
          goto handle_unusual;
        continue;
      // string filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Command.File.filename"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_File::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.File)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .File_mode mode = 1;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // string filename = 2;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.File.filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.File)
  return target;
}

size_t Command_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.File)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 2;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // .File_mode mode = 1;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_File::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Command_File::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_File::GetClassData() const { return &_class_data_; }

void Command_File::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Command_File *>(to)->MergeFrom(
      static_cast<const Command_File &>(from));
}


void Command_File::MergeFrom(const Command_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Command.File)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _internal_set_filename(from._internal_filename());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_File::CopyFrom(const Command_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_File::IsInitialized() const {
  return true;
}

void Command_File::InternalSwap(Command_File* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_File::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fprotocol_2eproto_getter, &descriptor_table_server_5fprotocol_2eproto_once,
      file_level_metadata_server_5fprotocol_2eproto[2]);
}

// ===================================================================

class Command_Keep_notations::_Internal {
 public:
};

Command_Keep_notations::Command_Keep_notations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Command.Keep_notations)
}
Command_Keep_notations::Command_Keep_notations(const Command_Keep_notations& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Command.Keep_notations)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Keep_notations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Keep_notations::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Command_Keep_notations::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fprotocol_2eproto_getter, &descriptor_table_server_5fprotocol_2eproto_once,
      file_level_metadata_server_5fprotocol_2eproto[3]);
}

// ===================================================================

class Command_Expand_notations::_Internal {
 public:
};

Command_Expand_notations::Command_Expand_notations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Command.Expand_notations)
}
Command_Expand_notations::Command_Expand_notations(const Command_Expand_notations& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Command.Expand_notations)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Expand_notations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Expand_notations::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Command_Expand_notations::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fprotocol_2eproto_getter, &descriptor_table_server_5fprotocol_2eproto_once,
      file_level_metadata_server_5fprotocol_2eproto[4]);
}

// ===================================================================

class Command_Compiled::_Internal {
 public:
};

Command_Compiled::Command_Compiled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Command.Compiled)
}
Command_Compiled::Command_Compiled(const Command_Compiled& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Command.Compiled)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Compiled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Compiled::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Command_Compiled::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fprotocol_2eproto_getter, &descriptor_table_server_5fprotocol_2eproto_once,
      file_level_metadata_server_5fprotocol_2eproto[5]);
}

// ===================================================================

class Command_Interpreted::_Internal {
 public:
};

Command_Interpreted::Command_Interpreted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Command.Interpreted)
}
Command_Interpreted::Command_Interpreted(const Command_Interpreted& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Command.Interpreted)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Interpreted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Interpreted::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Command_Interpreted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fprotocol_2eproto_getter, &descriptor_table_server_5fprotocol_2eproto_once,
      file_level_metadata_server_5fprotocol_2eproto[6]);
}

// ===================================================================

class Command_First_order::_Internal {
 public:
};

Command_First_order::Command_First_order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Command.First_order)
}
Command_First_order::Command_First_order(const Command_First_order& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Command.First_order)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_First_order::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_First_order::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Command_First_order::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fprotocol_2eproto_getter, &descriptor_table_server_5fprotocol_2eproto_once,
      file_level_metadata_server_5fprotocol_2eproto[7]);
}

// ===================================================================

class Command_Notation::_Internal {
 public:
};

Command_Notation::Command_Notation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  params_(arena),
  syntax_(arena),
  semantics_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Command.Notation)
}
Command_Notation::Command_Notation(const Command_Notation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      params_(from.params_),
      syntax_(from.syntax_),
      semantics_(from.semantics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Command.Notation)
}

inline void Command_Notation::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_Notation::~Command_Notation() {
  // @@protoc_insertion_point(destructor:Command.Notation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_Notation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void Command_Notation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Command_Notation::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.Notation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  syntax_.Clear();
  semantics_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_Notation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Command.Notation.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_params();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Command.Notation.params"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Notation_element syntax = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_syntax(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Notation_element semantics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_semantics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_Notation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.Notation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.Notation.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string params = 2;
  for (int i = 0, n = this->_internal_params_size(); i < n; i++) {
    const auto& s = this->_internal_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.Notation.params");
    target = stream->WriteString(2, s, target);
  }

  // repeated .Notation_element syntax = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_syntax_size()); i < n; i++) {
    const auto& repfield = this->_internal_syntax(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Notation_element semantics = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_semantics_size()); i < n; i++) {
    const auto& repfield = this->_internal_semantics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.Notation)
  return target;
}

size_t Command_Notation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.Notation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string params = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(params_.size());
  for (int i = 0, n = params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      params_.Get(i));
  }

  // repeated .Notation_element syntax = 3;
  total_size += 1UL * this->_internal_syntax_size();
  for (const auto& msg : this->syntax_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Notation_element semantics = 4;
  total_size += 1UL * this->_internal_semantics_size();
  for (const auto& msg : this->semantics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Notation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Command_Notation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Notation::GetClassData() const { return &_class_data_; }

void Command_Notation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Command_Notation *>(to)->MergeFrom(
      static_cast<const Command_Notation &>(from));
}


void Command_Notation::MergeFrom(const Command_Notation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Command.Notation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  syntax_.MergeFrom(from.syntax_);
  semantics_.MergeFrom(from.semantics_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_Notation::CopyFrom(const Command_Notation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.Notation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_Notation::IsInitialized() const {
  return true;
}

void Command_Notation::InternalSwap(Command_Notation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  params_.InternalSwap(&other->params_);
  syntax_.InternalSwap(&other->syntax_);
  semantics_.InternalSwap(&other->semantics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_Notation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fprotocol_2eproto_getter, &descriptor_table_server_5fprotocol_2eproto_once,
      file_level_metadata_server_5fprotocol_2eproto[8]);
}

// ===================================================================

class Command_Theorem::_Internal {
 public:
};

Command_Theorem::Command_Theorem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  params_(arena),
  premisses_(arena),
  demonstration_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Command.Theorem)
}
Command_Theorem::Command_Theorem(const Command_Theorem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      params_(from.params_),
      premisses_(from.premisses_),
      demonstration_(from.demonstration_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  conclusion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    conclusion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conclusion().empty()) {
    conclusion_.Set(from._internal_conclusion(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:Command.Theorem)
}

inline void Command_Theorem::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
conclusion_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  conclusion_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = 0;
}

Command_Theorem::~Command_Theorem() {
  // @@protoc_insertion_point(destructor:Command.Theorem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_Theorem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  conclusion_.Destroy();
}

void Command_Theorem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Command_Theorem::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.Theorem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  premisses_.Clear();
  demonstration_.Clear();
  name_.ClearToEmpty();
  conclusion_.ClearToEmpty();
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_Theorem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Command.Theorem.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_params();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Command.Theorem.params"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string premisses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_premisses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Command.Theorem.premisses"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string conclusion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_conclusion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Command.Theorem.conclusion"));
        } else
          goto handle_unusual;
        continue;
      // repeated string demonstration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_demonstration();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Command.Theorem.demonstration"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .Status status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::Status>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_Theorem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.Theorem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.Theorem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string params = 2;
  for (int i = 0, n = this->_internal_params_size(); i < n; i++) {
    const auto& s = this->_internal_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.Theorem.params");
    target = stream->WriteString(2, s, target);
  }

  // repeated string premisses = 3;
  for (int i = 0, n = this->_internal_premisses_size(); i < n; i++) {
    const auto& s = this->_internal_premisses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.Theorem.premisses");
    target = stream->WriteString(3, s, target);
  }

  // string conclusion = 4;
  if (!this->_internal_conclusion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conclusion().data(), static_cast<int>(this->_internal_conclusion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.Theorem.conclusion");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_conclusion(), target);
  }

  // repeated string demonstration = 5;
  for (int i = 0, n = this->_internal_demonstration_size(); i < n; i++) {
    const auto& s = this->_internal_demonstration(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.Theorem.demonstration");
    target = stream->WriteString(5, s, target);
  }

  // .Status status = 6;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.Theorem)
  return target;
}

size_t Command_Theorem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.Theorem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string params = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(params_.size());
  for (int i = 0, n = params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      params_.Get(i));
  }

  // repeated string premisses = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(premisses_.size());
  for (int i = 0, n = premisses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      premisses_.Get(i));
  }

  // repeated string demonstration = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(demonstration_.size());
  for (int i = 0, n = demonstration_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      demonstration_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string conclusion = 4;
  if (!this->_internal_conclusion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conclusion());
  }

  // .Status status = 6;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Theorem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Command_Theorem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Theorem::GetClassData() const { return &_class_data_; }

void Command_Theorem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Command_Theorem *>(to)->MergeFrom(
      static_cast<const Command_Theorem &>(from));
}


void Command_Theorem::MergeFrom(const Command_Theorem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Command.Theorem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  premisses_.MergeFrom(from.premisses_);
  demonstration_.MergeFrom(from.demonstration_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_conclusion().empty()) {
    _internal_set_conclusion(from._internal_conclusion());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_Theorem::CopyFrom(const Command_Theorem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.Theorem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_Theorem::IsInitialized() const {
  return true;
}

void Command_Theorem::InternalSwap(Command_Theorem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  params_.InternalSwap(&other->params_);
  premisses_.InternalSwap(&other->premisses_);
  demonstration_.InternalSwap(&other->demonstration_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &conclusion_, lhs_arena,
      &other->conclusion_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_Theorem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fprotocol_2eproto_getter, &descriptor_table_server_5fprotocol_2eproto_once,
      file_level_metadata_server_5fprotocol_2eproto[9]);
}

// ===================================================================

class Command_Axiom::_Internal {
 public:
};

Command_Axiom::Command_Axiom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Command.Axiom)
}
Command_Axiom::Command_Axiom(const Command_Axiom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  formula_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    formula_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_formula().empty()) {
    formula_.Set(from._internal_formula(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Command.Axiom)
}

inline void Command_Axiom::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
formula_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  formula_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_Axiom::~Command_Axiom() {
  // @@protoc_insertion_point(destructor:Command.Axiom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_Axiom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  formula_.Destroy();
}

void Command_Axiom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Command_Axiom::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.Axiom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  formula_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_Axiom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Command.Axiom.name"));
        } else
          goto handle_unusual;
        continue;
      // string formula = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_formula();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Command.Axiom.formula"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_Axiom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.Axiom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.Axiom.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string formula = 2;
  if (!this->_internal_formula().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_formula().data(), static_cast<int>(this->_internal_formula().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.Axiom.formula");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_formula(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.Axiom)
  return target;
}

size_t Command_Axiom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.Axiom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string formula = 2;
  if (!this->_internal_formula().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_formula());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Axiom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Command_Axiom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Axiom::GetClassData() const { return &_class_data_; }

void Command_Axiom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Command_Axiom *>(to)->MergeFrom(
      static_cast<const Command_Axiom &>(from));
}


void Command_Axiom::MergeFrom(const Command_Axiom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Command.Axiom)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_formula().empty()) {
    _internal_set_formula(from._internal_formula());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_Axiom::CopyFrom(const Command_Axiom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.Axiom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_Axiom::IsInitialized() const {
  return true;
}

void Command_Axiom::InternalSwap(Command_Axiom* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &formula_, lhs_arena,
      &other->formula_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_Axiom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fprotocol_2eproto_getter, &descriptor_table_server_5fprotocol_2eproto_once,
      file_level_metadata_server_5fprotocol_2eproto[10]);
}

// ===================================================================

class Command_History::_Internal {
 public:
};

Command_History::Command_History(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Command.History)
}
Command_History::Command_History(const Command_History& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Command.History)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_History::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_History::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Command_History::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fprotocol_2eproto_getter, &descriptor_table_server_5fprotocol_2eproto_once,
      file_level_metadata_server_5fprotocol_2eproto[11]);
}

// ===================================================================

class Command_Quit::_Internal {
 public:
};

Command_Quit::Command_Quit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Command.Quit)
}
Command_Quit::Command_Quit(const Command_Quit& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Command.Quit)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Quit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Quit::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Command_Quit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fprotocol_2eproto_getter, &descriptor_table_server_5fprotocol_2eproto_once,
      file_level_metadata_server_5fprotocol_2eproto[12]);
}

// ===================================================================

class Command::_Internal {
 public:
  static const ::Command_Prop& prop(const Command* msg);
  static const ::Command_Keep_notations& keep_notations(const Command* msg);
  static const ::Command_Expand_notations& expand_notations(const Command* msg);
  static const ::Command_Compiled& compiled(const Command* msg);
  static const ::Command_Interpreted& interpreted(const Command* msg);
  static const ::Command_File& save(const Command* msg);
  static const ::Command_File& load(const Command* msg);
  static const ::Command_First_order& first_order(const Command* msg);
  static const ::Command_Notation& notation(const Command* msg);
  static const ::Command_Theorem& theorem(const Command* msg);
  static const ::Command_Axiom& axiom(const Command* msg);
  static const ::Command_History& history(const Command* msg);
  static const ::Command_Quit& quit(const Command* msg);
};

const ::Command_Prop&
Command::_Internal::prop(const Command* msg) {
  return *msg->t_.prop_;
}
const ::Command_Keep_notations&
Command::_Internal::keep_notations(const Command* msg) {
  return *msg->t_.keep_notations_;
}
const ::Command_Expand_notations&
Command::_Internal::expand_notations(const Command* msg) {
  return *msg->t_.expand_notations_;
}
const ::Command_Compiled&
Command::_Internal::compiled(const Command* msg) {
  return *msg->t_.compiled_;
}
const ::Command_Interpreted&
Command::_Internal::interpreted(const Command* msg) {
  return *msg->t_.interpreted_;
}
const ::Command_File&
Command::_Internal::save(const Command* msg) {
  return *msg->t_.save_;
}
const ::Command_File&
Command::_Internal::load(const Command* msg) {
  return *msg->t_.load_;
}
const ::Command_First_order&
Command::_Internal::first_order(const Command* msg) {
  return *msg->t_.first_order_;
}
const ::Command_Notation&
Command::_Internal::notation(const Command* msg) {
  return *msg->t_.notation_;
}
const ::Command_Theorem&
Command::_Internal::theorem(const Command* msg) {
  return *msg->t_.theorem_;
}
const ::Command_Axiom&
Command::_Internal::axiom(const Command* msg) {
  return *msg->t_.axiom_;
}
const ::Command_History&
Command::_Internal::history(const Command* msg) {
  return *msg->t_.history_;
}
const ::Command_Quit&
Command::_Internal::quit(const Command* msg) {
  return *msg->t_.quit_;
}
void Command::set_allocated_prop(::Command_Prop* prop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_t();
  if (prop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prop);
    if (message_arena != submessage_arena) {
      prop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prop, submessage_arena);
    }
    set_has_prop();
    t_.prop_ = prop;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.prop)
}
void Command::set_allocated_keep_notations(::Command_Keep_notations* keep_notations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_t();
  if (keep_notations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(keep_notations);
    if (message_arena != submessage_arena) {
      keep_notations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keep_notations, submessage_arena);
    }
    set_has_keep_notations();
    t_.keep_notations_ = keep_notations;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.keep_notations)
}
void Command::set_allocated_expand_notations(::Command_Expand_notations* expand_notations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_t();
  if (expand_notations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(expand_notations);
    if (message_arena != submessage_arena) {
      expand_notations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expand_notations, submessage_arena);
    }
    set_has_expand_notations();
    t_.expand_notations_ = expand_notations;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.expand_notations)
}
void Command::set_allocated_compiled(::Command_Compiled* compiled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_t();
  if (compiled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(compiled);
    if (message_arena != submessage_arena) {
      compiled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compiled, submessage_arena);
    }
    set_has_compiled();
    t_.compiled_ = compiled;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.compiled)
}
void Command::set_allocated_interpreted(::Command_Interpreted* interpreted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_t();
  if (interpreted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(interpreted);
    if (message_arena != submessage_arena) {
      interpreted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interpreted, submessage_arena);
    }
    set_has_interpreted();
    t_.interpreted_ = interpreted;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.interpreted)
}
void Command::set_allocated_save(::Command_File* save) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_t();
  if (save) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(save);
    if (message_arena != submessage_arena) {
      save = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save, submessage_arena);
    }
    set_has_save();
    t_.save_ = save;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.save)
}
void Command::set_allocated_load(::Command_File* load) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_t();
  if (load) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(load);
    if (message_arena != submessage_arena) {
      load = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load, submessage_arena);
    }
    set_has_load();
    t_.load_ = load;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.load)
}
void Command::set_allocated_first_order(::Command_First_order* first_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_t();
  if (first_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(first_order);
    if (message_arena != submessage_arena) {
      first_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first_order, submessage_arena);
    }
    set_has_first_order();
    t_.first_order_ = first_order;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.first_order)
}
void Command::set_allocated_notation(::Command_Notation* notation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_t();
  if (notation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(notation);
    if (message_arena != submessage_arena) {
      notation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notation, submessage_arena);
    }
    set_has_notation();
    t_.notation_ = notation;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.notation)
}
void Command::set_allocated_theorem(::Command_Theorem* theorem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_t();
  if (theorem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(theorem);
    if (message_arena != submessage_arena) {
      theorem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theorem, submessage_arena);
    }
    set_has_theorem();
    t_.theorem_ = theorem;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.theorem)
}
void Command::set_allocated_axiom(::Command_Axiom* axiom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_t();
  if (axiom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(axiom);
    if (message_arena != submessage_arena) {
      axiom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, axiom, submessage_arena);
    }
    set_has_axiom();
    t_.axiom_ = axiom;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.axiom)
}
void Command::set_allocated_history(::Command_History* history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_t();
  if (history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(history);
    if (message_arena != submessage_arena) {
      history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, history, submessage_arena);
    }
    set_has_history();
    t_.history_ = history;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.history)
}
void Command::set_allocated_quit(::Command_Quit* quit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_t();
  if (quit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(quit);
    if (message_arena != submessage_arena) {
      quit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quit, submessage_arena);
    }
    set_has_quit();
    t_.quit_ = quit;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.quit)
}
Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_t();
  switch (from.t_case()) {
    case kVerbose: {
      _internal_set_verbose(from._internal_verbose());
      break;
    }
    case kProp: {
      _internal_mutable_prop()->::Command_Prop::MergeFrom(from._internal_prop());
      break;
    }
    case kKeepNotations: {
      _internal_mutable_keep_notations()->::Command_Keep_notations::MergeFrom(from._internal_keep_notations());
      break;
    }
    case kExpandNotations: {
      _internal_mutable_expand_notations()->::Command_Expand_notations::MergeFrom(from._internal_expand_notations());
      break;
    }
    case kCompiled: {
      _internal_mutable_compiled()->::Command_Compiled::MergeFrom(from._internal_compiled());
      break;
    }
    case kInterpreted: {
      _internal_mutable_interpreted()->::Command_Interpreted::MergeFrom(from._internal_interpreted());
      break;
    }
    case kSave: {
      _internal_mutable_save()->::Command_File::MergeFrom(from._internal_save());
      break;
    }
    case kLoad: {
      _internal_mutable_load()->::Command_File::MergeFrom(from._internal_load());
      break;
    }
    case kFirstOrder: {
      _internal_mutable_first_order()->::Command_First_order::MergeFrom(from._internal_first_order());
      break;
    }
    case kNotation: {
      _internal_mutable_notation()->::Command_Notation::MergeFrom(from._internal_notation());
      break;
    }
    case kTheorem: {
      _internal_mutable_theorem()->::Command_Theorem::MergeFrom(from._internal_theorem());
      break;
    }
    case kAxiom: {
      _internal_mutable_axiom()->::Command_Axiom::MergeFrom(from._internal_axiom());
      break;
    }
    case kHistory: {
      _internal_mutable_history()->::Command_History::MergeFrom(from._internal_history());
      break;
    }
    case kShow: {
      _internal_set_show(from._internal_show());
      break;
    }
    case kList: {
      _internal_set_list(from._internal_list());
      break;
    }
    case kQuit: {
      _internal_mutable_quit()->::Command_Quit::MergeFrom(from._internal_quit());
      break;
    }
    case T_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Command)
}

inline void Command::SharedCtor() {
clear_has_t();
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:Command)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_t()) {
    clear_t();
  }
}

void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Command::clear_t() {
// @@protoc_insertion_point(one_of_clear_start:Command)
  switch (t_case()) {
    case kVerbose: {
      // No need to clear
      break;
    }
    case kProp: {
      if (GetArenaForAllocation() == nullptr) {
        delete t_.prop_;
      }
      break;
    }
    case kKeepNotations: {
      if (GetArenaForAllocation() == nullptr) {
        delete t_.keep_notations_;
      }
      break;
    }
    case kExpandNotations: {
      if (GetArenaForAllocation() == nullptr) {
        delete t_.expand_notations_;
      }
      break;
    }
    case kCompiled: {
      if (GetArenaForAllocation() == nullptr) {
        delete t_.compiled_;
      }
      break;
    }
    case kInterpreted: {
      if (GetArenaForAllocation() == nullptr) {
        delete t_.interpreted_;
      }
      break;
    }
    case kSave: {
      if (GetArenaForAllocation() == nullptr) {
        delete t_.save_;
      }
      break;
    }
    case kLoad: {
      if (GetArenaForAllocation() == nullptr) {
        delete t_.load_;
      }
      break;
    }
    case kFirstOrder: {
      if (GetArenaForAllocation() == nullptr) {
        delete t_.first_order_;
      }
      break;
    }
    case kNotation: {
      if (GetArenaForAllocation() == nullptr) {
        delete t_.notation_;
      }
      break;
    }
    case kTheorem: {
      if (GetArenaForAllocation() == nullptr) {
        delete t_.theorem_;
      }
      break;
    }
    case kAxiom: {
      if (GetArenaForAllocation() == nullptr) {
        delete t_.axiom_;
      }
      break;
    }
    case kHistory: {
      if (GetArenaForAllocation() == nullptr) {
        delete t_.history_;
      }
      break;
    }
    case kShow: {
      t_.show_.Destroy();
      break;
    }
    case kList: {
      // No need to clear
      break;
    }
    case kQuit: {
      if (GetArenaForAllocation() == nullptr) {
        delete t_.quit_;
      }
      break;
    }
    case T_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = T_NOT_SET;
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:Command)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_t();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 verbose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_verbose(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.Prop prop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.Keep_notations keep_notations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_keep_notations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.Expand_notations expand_notations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_expand_notations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.Compiled compiled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_compiled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.Interpreted interpreted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_interpreted(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.File save = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_save(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.File load = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_load(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.First_order first_order = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.Notation notation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_notation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.Theorem theorem = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_theorem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.Axiom axiom = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_axiom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.History history = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_history(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string show = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_show();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Command.show"));
        } else
          goto handle_unusual;
        continue;
      // .Known list = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_list(static_cast<::Known>(val));
        } else
          goto handle_unusual;
        continue;
      // .Command.Quit quit = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_quit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 verbose = 1;
  if (_internal_has_verbose()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_verbose(), target);
  }

  // .Command.Prop prop = 2;
  if (_internal_has_prop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::prop(this),
        _Internal::prop(this).GetCachedSize(), target, stream);
  }

  // .Command.Keep_notations keep_notations = 3;
  if (_internal_has_keep_notations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::keep_notations(this),
        _Internal::keep_notations(this).GetCachedSize(), target, stream);
  }

  // .Command.Expand_notations expand_notations = 4;
  if (_internal_has_expand_notations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::expand_notations(this),
        _Internal::expand_notations(this).GetCachedSize(), target, stream);
  }

  // .Command.Compiled compiled = 5;
  if (_internal_has_compiled()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::compiled(this),
        _Internal::compiled(this).GetCachedSize(), target, stream);
  }

  // .Command.Interpreted interpreted = 6;
  if (_internal_has_interpreted()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::interpreted(this),
        _Internal::interpreted(this).GetCachedSize(), target, stream);
  }

  // .Command.File save = 7;
  if (_internal_has_save()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::save(this),
        _Internal::save(this).GetCachedSize(), target, stream);
  }

  // .Command.File load = 8;
  if (_internal_has_load()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::load(this),
        _Internal::load(this).GetCachedSize(), target, stream);
  }

  // .Command.First_order first_order = 9;
  if (_internal_has_first_order()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::first_order(this),
        _Internal::first_order(this).GetCachedSize(), target, stream);
  }

  // .Command.Notation notation = 10;
  if (_internal_has_notation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::notation(this),
        _Internal::notation(this).GetCachedSize(), target, stream);
  }

  // .Command.Theorem theorem = 11;
  if (_internal_has_theorem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::theorem(this),
        _Internal::theorem(this).GetCachedSize(), target, stream);
  }

  // .Command.Axiom axiom = 12;
  if (_internal_has_axiom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::axiom(this),
        _Internal::axiom(this).GetCachedSize(), target, stream);
  }

  // .Command.History history = 13;
  if (_internal_has_history()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::history(this),
        _Internal::history(this).GetCachedSize(), target, stream);
  }

  // string show = 14;
  if (_internal_has_show()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_show().data(), static_cast<int>(this->_internal_show().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.show");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_show(), target);
  }

  // .Known list = 15;
  if (_internal_has_list()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_list(), target);
  }

  // .Command.Quit quit = 16;
  if (_internal_has_quit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::quit(this),
        _Internal::quit(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (t_case()) {
    // int32 verbose = 1;
    case kVerbose: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_verbose());
      break;
    }
    // .Command.Prop prop = 2;
    case kProp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_.prop_);
      break;
    }
    // .Command.Keep_notations keep_notations = 3;
    case kKeepNotations: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_.keep_notations_);
      break;
    }
    // .Command.Expand_notations expand_notations = 4;
    case kExpandNotations: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_.expand_notations_);
      break;
    }
    // .Command.Compiled compiled = 5;
    case kCompiled: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_.compiled_);
      break;
    }
    // .Command.Interpreted interpreted = 6;
    case kInterpreted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_.interpreted_);
      break;
    }
    // .Command.File save = 7;
    case kSave: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_.save_);
      break;
    }
    // .Command.File load = 8;
    case kLoad: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_.load_);
      break;
    }
    // .Command.First_order first_order = 9;
    case kFirstOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_.first_order_);
      break;
    }
    // .Command.Notation notation = 10;
    case kNotation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_.notation_);
      break;
    }
    // .Command.Theorem theorem = 11;
    case kTheorem: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_.theorem_);
      break;
    }
    // .Command.Axiom axiom = 12;
    case kAxiom: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_.axiom_);
      break;
    }
    // .Command.History history = 13;
    case kHistory: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_.history_);
      break;
    }
    // string show = 14;
    case kShow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_show());
      break;
    }
    // .Known list = 15;
    case kList: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_list());
      break;
    }
    // .Command.Quit quit = 16;
    case kQuit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_.quit_);
      break;
    }
    case T_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Command::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command::GetClassData() const { return &_class_data_; }

void Command::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Command *>(to)->MergeFrom(
      static_cast<const Command &>(from));
}


void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Command)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.t_case()) {
    case kVerbose: {
      _internal_set_verbose(from._internal_verbose());
      break;
    }
    case kProp: {
      _internal_mutable_prop()->::Command_Prop::MergeFrom(from._internal_prop());
      break;
    }
    case kKeepNotations: {
      _internal_mutable_keep_notations()->::Command_Keep_notations::MergeFrom(from._internal_keep_notations());
      break;
    }
    case kExpandNotations: {
      _internal_mutable_expand_notations()->::Command_Expand_notations::MergeFrom(from._internal_expand_notations());
      break;
    }
    case kCompiled: {
      _internal_mutable_compiled()->::Command_Compiled::MergeFrom(from._internal_compiled());
      break;
    }
    case kInterpreted: {
      _internal_mutable_interpreted()->::Command_Interpreted::MergeFrom(from._internal_interpreted());
      break;
    }
    case kSave: {
      _internal_mutable_save()->::Command_File::MergeFrom(from._internal_save());
      break;
    }
    case kLoad: {
      _internal_mutable_load()->::Command_File::MergeFrom(from._internal_load());
      break;
    }
    case kFirstOrder: {
      _internal_mutable_first_order()->::Command_First_order::MergeFrom(from._internal_first_order());
      break;
    }
    case kNotation: {
      _internal_mutable_notation()->::Command_Notation::MergeFrom(from._internal_notation());
      break;
    }
    case kTheorem: {
      _internal_mutable_theorem()->::Command_Theorem::MergeFrom(from._internal_theorem());
      break;
    }
    case kAxiom: {
      _internal_mutable_axiom()->::Command_Axiom::MergeFrom(from._internal_axiom());
      break;
    }
    case kHistory: {
      _internal_mutable_history()->::Command_History::MergeFrom(from._internal_history());
      break;
    }
    case kShow: {
      _internal_set_show(from._internal_show());
      break;
    }
    case kList: {
      _internal_set_list(from._internal_list());
      break;
    }
    case kQuit: {
      _internal_mutable_quit()->::Command_Quit::MergeFrom(from._internal_quit());
      break;
    }
    case T_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(t_, other->t_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fprotocol_2eproto_getter, &descriptor_table_server_5fprotocol_2eproto_once,
      file_level_metadata_server_5fprotocol_2eproto[13]);
}

// ===================================================================

class Answer_Ok::_Internal {
 public:
};

Answer_Ok::Answer_Ok(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Answer.Ok)
}
Answer_Ok::Answer_Ok(const Answer_Ok& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Answer.Ok)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Answer_Ok::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Answer_Ok::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Answer_Ok::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fprotocol_2eproto_getter, &descriptor_table_server_5fprotocol_2eproto_once,
      file_level_metadata_server_5fprotocol_2eproto[14]);
}

// ===================================================================

class Answer_Error::_Internal {
 public:
  static const ::Command& command(const Answer_Error* msg);
};

const ::Command&
Answer_Error::_Internal::command(const Answer_Error* msg) {
  return *msg->command_;
}
Answer_Error::Answer_Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Answer.Error)
}
Answer_Error::Answer_Error(const Answer_Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    error_message_.Set(from._internal_error_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_command()) {
    command_ = new ::Command(*from.command_);
  } else {
    command_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Answer.Error)
}

inline void Answer_Error::SharedCtor() {
error_message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
command_ = nullptr;
}

Answer_Error::~Answer_Error() {
  // @@protoc_insertion_point(destructor:Answer.Error)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Answer_Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_message_.Destroy();
  if (this != internal_default_instance()) delete command_;
}

void Answer_Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Answer_Error::Clear() {
// @@protoc_insertion_point(message_clear_start:Answer.Error)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Answer_Error::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string error_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Answer.Error.error_message"));
        } else
          goto handle_unusual;
        continue;
      // .Command command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Answer_Error::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Answer.Error)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string error_message = 1;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Answer.Error.error_message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error_message(), target);
  }

  // .Command command = 2;
  if (this->_internal_has_command()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::command(this),
        _Internal::command(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Answer.Error)
  return target;
}

size_t Answer_Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Answer.Error)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 1;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .Command command = 2;
  if (this->_internal_has_command()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Answer_Error::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Answer_Error::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Answer_Error::GetClassData() const { return &_class_data_; }

void Answer_Error::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Answer_Error *>(to)->MergeFrom(
      static_cast<const Answer_Error &>(from));
}


void Answer_Error::MergeFrom(const Answer_Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Answer.Error)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_command()) {
    _internal_mutable_command()->::Command::MergeFrom(from._internal_command());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Answer_Error::CopyFrom(const Answer_Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Answer.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Answer_Error::IsInitialized() const {
  return true;
}

void Answer_Error::InternalSwap(Answer_Error* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  swap(command_, other->command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Answer_Error::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fprotocol_2eproto_getter, &descriptor_table_server_5fprotocol_2eproto_once,
      file_level_metadata_server_5fprotocol_2eproto[15]);
}

// ===================================================================

class Answer::_Internal {
 public:
  static const ::Answer_Ok& ok(const Answer* msg);
  static const ::Answer_Error& error(const Answer* msg);
};

const ::Answer_Ok&
Answer::_Internal::ok(const Answer* msg) {
  return *msg->t_.ok_;
}
const ::Answer_Error&
Answer::_Internal::error(const Answer* msg) {
  return *msg->t_.error_;
}
void Answer::set_allocated_ok(::Answer_Ok* ok) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_t();
  if (ok) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ok);
    if (message_arena != submessage_arena) {
      ok = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ok, submessage_arena);
    }
    set_has_ok();
    t_.ok_ = ok;
  }
  // @@protoc_insertion_point(field_set_allocated:Answer.ok)
}
void Answer::set_allocated_error(::Answer_Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_t();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    t_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:Answer.error)
}
Answer::Answer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Answer)
}
Answer::Answer(const Answer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_t();
  switch (from.t_case()) {
    case kOk: {
      _internal_mutable_ok()->::Answer_Ok::MergeFrom(from._internal_ok());
      break;
    }
    case kError: {
      _internal_mutable_error()->::Answer_Error::MergeFrom(from._internal_error());
      break;
    }
    case kAnswer: {
      _internal_set_answer(from._internal_answer());
      break;
    }
    case T_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Answer)
}

inline void Answer::SharedCtor() {
clear_has_t();
}

Answer::~Answer() {
  // @@protoc_insertion_point(destructor:Answer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Answer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_t()) {
    clear_t();
  }
}

void Answer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Answer::clear_t() {
// @@protoc_insertion_point(one_of_clear_start:Answer)
  switch (t_case()) {
    case kOk: {
      if (GetArenaForAllocation() == nullptr) {
        delete t_.ok_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete t_.error_;
      }
      break;
    }
    case kAnswer: {
      t_.answer_.Destroy();
      break;
    }
    case T_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = T_NOT_SET;
}


void Answer::Clear() {
// @@protoc_insertion_point(message_clear_start:Answer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_t();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Answer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Answer.Ok ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ok(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Answer.Error error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string answer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_answer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Answer.answer"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Answer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Answer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Answer.Ok ok = 1;
  if (_internal_has_ok()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ok(this),
        _Internal::ok(this).GetCachedSize(), target, stream);
  }

  // .Answer.Error error = 2;
  if (_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // string answer = 3;
  if (_internal_has_answer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_answer().data(), static_cast<int>(this->_internal_answer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Answer.answer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_answer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Answer)
  return target;
}

size_t Answer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Answer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (t_case()) {
    // .Answer.Ok ok = 1;
    case kOk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_.ok_);
      break;
    }
    // .Answer.Error error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_.error_);
      break;
    }
    // string answer = 3;
    case kAnswer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_answer());
      break;
    }
    case T_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Answer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Answer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Answer::GetClassData() const { return &_class_data_; }

void Answer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Answer *>(to)->MergeFrom(
      static_cast<const Answer &>(from));
}


void Answer::MergeFrom(const Answer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Answer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.t_case()) {
    case kOk: {
      _internal_mutable_ok()->::Answer_Ok::MergeFrom(from._internal_ok());
      break;
    }
    case kError: {
      _internal_mutable_error()->::Answer_Error::MergeFrom(from._internal_error());
      break;
    }
    case kAnswer: {
      _internal_set_answer(from._internal_answer());
      break;
    }
    case T_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Answer::CopyFrom(const Answer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Answer::IsInitialized() const {
  return true;
}

void Answer::InternalSwap(Answer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(t_, other->t_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Answer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fprotocol_2eproto_getter, &descriptor_table_server_5fprotocol_2eproto_once,
      file_level_metadata_server_5fprotocol_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Notation_element*
Arena::CreateMaybeMessage< ::Notation_element >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Notation_element >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Prop*
Arena::CreateMaybeMessage< ::Command_Prop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Prop >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_File*
Arena::CreateMaybeMessage< ::Command_File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_File >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Keep_notations*
Arena::CreateMaybeMessage< ::Command_Keep_notations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Keep_notations >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Expand_notations*
Arena::CreateMaybeMessage< ::Command_Expand_notations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Expand_notations >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Compiled*
Arena::CreateMaybeMessage< ::Command_Compiled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Compiled >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Interpreted*
Arena::CreateMaybeMessage< ::Command_Interpreted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Interpreted >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_First_order*
Arena::CreateMaybeMessage< ::Command_First_order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_First_order >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Notation*
Arena::CreateMaybeMessage< ::Command_Notation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Notation >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Theorem*
Arena::CreateMaybeMessage< ::Command_Theorem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Theorem >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Axiom*
Arena::CreateMaybeMessage< ::Command_Axiom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Axiom >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_History*
Arena::CreateMaybeMessage< ::Command_History >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_History >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Quit*
Arena::CreateMaybeMessage< ::Command_Quit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Quit >(arena);
}
template<> PROTOBUF_NOINLINE ::Command*
Arena::CreateMaybeMessage< ::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::Answer_Ok*
Arena::CreateMaybeMessage< ::Answer_Ok >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Answer_Ok >(arena);
}
template<> PROTOBUF_NOINLINE ::Answer_Error*
Arena::CreateMaybeMessage< ::Answer_Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Answer_Error >(arena);
}
template<> PROTOBUF_NOINLINE ::Answer*
Arena::CreateMaybeMessage< ::Answer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Answer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
