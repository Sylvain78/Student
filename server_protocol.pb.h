// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_5fprotocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fprotocol_2eproto;
namespace Server_Protocol {
class Answer;
struct AnswerDefaultTypeInternal;
extern AnswerDefaultTypeInternal _Answer_default_instance_;
class Answer_Error;
struct Answer_ErrorDefaultTypeInternal;
extern Answer_ErrorDefaultTypeInternal _Answer_Error_default_instance_;
class Answer_Latex_answer;
struct Answer_Latex_answerDefaultTypeInternal;
extern Answer_Latex_answerDefaultTypeInternal _Answer_Latex_answer_default_instance_;
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Command_Axiom;
struct Command_AxiomDefaultTypeInternal;
extern Command_AxiomDefaultTypeInternal _Command_Axiom_default_instance_;
class Command_Compiled;
struct Command_CompiledDefaultTypeInternal;
extern Command_CompiledDefaultTypeInternal _Command_Compiled_default_instance_;
class Command_Expand_notations;
struct Command_Expand_notationsDefaultTypeInternal;
extern Command_Expand_notationsDefaultTypeInternal _Command_Expand_notations_default_instance_;
class Command_File;
struct Command_FileDefaultTypeInternal;
extern Command_FileDefaultTypeInternal _Command_File_default_instance_;
class Command_First_order;
struct Command_First_orderDefaultTypeInternal;
extern Command_First_orderDefaultTypeInternal _Command_First_order_default_instance_;
class Command_History;
struct Command_HistoryDefaultTypeInternal;
extern Command_HistoryDefaultTypeInternal _Command_History_default_instance_;
class Command_Interpreted;
struct Command_InterpretedDefaultTypeInternal;
extern Command_InterpretedDefaultTypeInternal _Command_Interpreted_default_instance_;
class Command_Keep_notations;
struct Command_Keep_notationsDefaultTypeInternal;
extern Command_Keep_notationsDefaultTypeInternal _Command_Keep_notations_default_instance_;
class Command_Notation;
struct Command_NotationDefaultTypeInternal;
extern Command_NotationDefaultTypeInternal _Command_Notation_default_instance_;
class Command_Prop;
struct Command_PropDefaultTypeInternal;
extern Command_PropDefaultTypeInternal _Command_Prop_default_instance_;
class Command_Quit;
struct Command_QuitDefaultTypeInternal;
extern Command_QuitDefaultTypeInternal _Command_Quit_default_instance_;
class Command_Theorem;
struct Command_TheoremDefaultTypeInternal;
extern Command_TheoremDefaultTypeInternal _Command_Theorem_default_instance_;
class Notation_element;
struct Notation_elementDefaultTypeInternal;
extern Notation_elementDefaultTypeInternal _Notation_element_default_instance_;
}  // namespace Server_Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Server_Protocol::Answer* Arena::CreateMaybeMessage<::Server_Protocol::Answer>(Arena*);
template<> ::Server_Protocol::Answer_Error* Arena::CreateMaybeMessage<::Server_Protocol::Answer_Error>(Arena*);
template<> ::Server_Protocol::Answer_Latex_answer* Arena::CreateMaybeMessage<::Server_Protocol::Answer_Latex_answer>(Arena*);
template<> ::Server_Protocol::Command* Arena::CreateMaybeMessage<::Server_Protocol::Command>(Arena*);
template<> ::Server_Protocol::Command_Axiom* Arena::CreateMaybeMessage<::Server_Protocol::Command_Axiom>(Arena*);
template<> ::Server_Protocol::Command_Compiled* Arena::CreateMaybeMessage<::Server_Protocol::Command_Compiled>(Arena*);
template<> ::Server_Protocol::Command_Expand_notations* Arena::CreateMaybeMessage<::Server_Protocol::Command_Expand_notations>(Arena*);
template<> ::Server_Protocol::Command_File* Arena::CreateMaybeMessage<::Server_Protocol::Command_File>(Arena*);
template<> ::Server_Protocol::Command_First_order* Arena::CreateMaybeMessage<::Server_Protocol::Command_First_order>(Arena*);
template<> ::Server_Protocol::Command_History* Arena::CreateMaybeMessage<::Server_Protocol::Command_History>(Arena*);
template<> ::Server_Protocol::Command_Interpreted* Arena::CreateMaybeMessage<::Server_Protocol::Command_Interpreted>(Arena*);
template<> ::Server_Protocol::Command_Keep_notations* Arena::CreateMaybeMessage<::Server_Protocol::Command_Keep_notations>(Arena*);
template<> ::Server_Protocol::Command_Notation* Arena::CreateMaybeMessage<::Server_Protocol::Command_Notation>(Arena*);
template<> ::Server_Protocol::Command_Prop* Arena::CreateMaybeMessage<::Server_Protocol::Command_Prop>(Arena*);
template<> ::Server_Protocol::Command_Quit* Arena::CreateMaybeMessage<::Server_Protocol::Command_Quit>(Arena*);
template<> ::Server_Protocol::Command_Theorem* Arena::CreateMaybeMessage<::Server_Protocol::Command_Theorem>(Arena*);
template<> ::Server_Protocol::Notation_element* Arena::CreateMaybeMessage<::Server_Protocol::Notation_element>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Server_Protocol {

enum File_mode : int {
  TEXT = 0,
  BINARY = 1,
  File_mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  File_mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool File_mode_IsValid(int value);
constexpr File_mode File_mode_MIN = TEXT;
constexpr File_mode File_mode_MAX = BINARY;
constexpr int File_mode_ARRAYSIZE = File_mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* File_mode_descriptor();
template<typename T>
inline const std::string& File_mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, File_mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function File_mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    File_mode_descriptor(), enum_t_value);
}
inline bool File_mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, File_mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<File_mode>(
    File_mode_descriptor(), name, value);
}
enum Status : int {
  UNVERIFIED = 0,
  VERIFIED = 1,
  UNTRUE = 2,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = UNVERIFIED;
constexpr Status Status_MAX = UNTRUE;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
enum Known : int {
  AXIOMS = 0,
  THEOREMS = 1,
  FILES = 2,
  Known_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Known_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Known_IsValid(int value);
constexpr Known Known_MIN = AXIOMS;
constexpr Known Known_MAX = FILES;
constexpr int Known_ARRAYSIZE = Known_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Known_descriptor();
template<typename T>
inline const std::string& Known_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Known>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Known_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Known_descriptor(), enum_t_value);
}
inline bool Known_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Known* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Known>(
    Known_descriptor(), name, value);
}
enum Latex_mode : int {
  LTEXT = 0,
  LMATH = 1,
  Latex_mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Latex_mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Latex_mode_IsValid(int value);
constexpr Latex_mode Latex_mode_MIN = LTEXT;
constexpr Latex_mode Latex_mode_MAX = LMATH;
constexpr int Latex_mode_ARRAYSIZE = Latex_mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Latex_mode_descriptor();
template<typename T>
inline const std::string& Latex_mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Latex_mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Latex_mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Latex_mode_descriptor(), enum_t_value);
}
inline bool Latex_mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Latex_mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Latex_mode>(
    Latex_mode_descriptor(), name, value);
}
// ===================================================================

class Notation_element final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Server_Protocol.Notation_element) */ {
 public:
  inline Notation_element() : Notation_element(nullptr) {}
  ~Notation_element() override;
  explicit PROTOBUF_CONSTEXPR Notation_element(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Notation_element(const Notation_element& from);
  Notation_element(Notation_element&& from) noexcept
    : Notation_element() {
    *this = ::std::move(from);
  }

  inline Notation_element& operator=(const Notation_element& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notation_element& operator=(Notation_element&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Notation_element& default_instance() {
    return *internal_default_instance();
  }
  enum TCase {
    kParam = 1,
    kString = 2,
    T_NOT_SET = 0,
  };

  static inline const Notation_element* internal_default_instance() {
    return reinterpret_cast<const Notation_element*>(
               &_Notation_element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Notation_element& a, Notation_element& b) {
    a.Swap(&b);
  }
  inline void Swap(Notation_element* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notation_element* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Notation_element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Notation_element>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Notation_element& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Notation_element& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notation_element* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Server_Protocol.Notation_element";
  }
  protected:
  explicit Notation_element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamFieldNumber = 1,
    kStringFieldNumber = 2,
  };
  // string param = 1;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const std::string& param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param();
  PROTOBUF_NODISCARD std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // string string = 2;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string();
  PROTOBUF_NODISCARD std::string* release_string();
  void set_allocated_string(std::string* string);
  private:
  const std::string& _internal_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  void clear_t();
  TCase t_case() const;
  // @@protoc_insertion_point(class_scope:Server_Protocol.Notation_element)
 private:
  class _Internal;
  void set_has_param();
  void set_has_string();

  inline bool has_t() const;
  inline void clear_has_t();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TUnion {
    constexpr TUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
  } t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_server_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Command_Prop final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Server_Protocol.Command.Prop) */ {
 public:
  inline Command_Prop() : Command_Prop(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Command_Prop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Prop(const Command_Prop& from);
  Command_Prop(Command_Prop&& from) noexcept
    : Command_Prop() {
    *this = ::std::move(from);
  }

  inline Command_Prop& operator=(const Command_Prop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Prop& operator=(Command_Prop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Prop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Prop* internal_default_instance() {
    return reinterpret_cast<const Command_Prop*>(
               &_Command_Prop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Command_Prop& a, Command_Prop& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Prop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Prop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Prop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Prop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Command_Prop& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Command_Prop& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Server_Protocol.Command.Prop";
  }
  protected:
  explicit Command_Prop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Server_Protocol.Command.Prop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_server_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Command_File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Server_Protocol.Command.File) */ {
 public:
  inline Command_File() : Command_File(nullptr) {}
  ~Command_File() override;
  explicit PROTOBUF_CONSTEXPR Command_File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_File(const Command_File& from);
  Command_File(Command_File&& from) noexcept
    : Command_File() {
    *this = ::std::move(from);
  }

  inline Command_File& operator=(const Command_File& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_File& operator=(Command_File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_File& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_File* internal_default_instance() {
    return reinterpret_cast<const Command_File*>(
               &_Command_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Command_File& a, Command_File& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_File* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Command_File& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_File* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Server_Protocol.Command.File";
  }
  protected:
  explicit Command_File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 2,
    kModeFieldNumber = 1,
  };
  // string filename = 2;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // .Server_Protocol.File_mode mode = 1;
  void clear_mode();
  ::Server_Protocol::File_mode mode() const;
  void set_mode(::Server_Protocol::File_mode value);
  private:
  ::Server_Protocol::File_mode _internal_mode() const;
  void _internal_set_mode(::Server_Protocol::File_mode value);
  public:

  // @@protoc_insertion_point(class_scope:Server_Protocol.Command.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Command_Keep_notations final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Server_Protocol.Command.Keep_notations) */ {
 public:
  inline Command_Keep_notations() : Command_Keep_notations(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Command_Keep_notations(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Keep_notations(const Command_Keep_notations& from);
  Command_Keep_notations(Command_Keep_notations&& from) noexcept
    : Command_Keep_notations() {
    *this = ::std::move(from);
  }

  inline Command_Keep_notations& operator=(const Command_Keep_notations& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Keep_notations& operator=(Command_Keep_notations&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Keep_notations& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Keep_notations* internal_default_instance() {
    return reinterpret_cast<const Command_Keep_notations*>(
               &_Command_Keep_notations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Command_Keep_notations& a, Command_Keep_notations& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Keep_notations* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Keep_notations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Keep_notations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Keep_notations>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Command_Keep_notations& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Command_Keep_notations& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Server_Protocol.Command.Keep_notations";
  }
  protected:
  explicit Command_Keep_notations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Server_Protocol.Command.Keep_notations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_server_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Command_Expand_notations final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Server_Protocol.Command.Expand_notations) */ {
 public:
  inline Command_Expand_notations() : Command_Expand_notations(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Command_Expand_notations(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Expand_notations(const Command_Expand_notations& from);
  Command_Expand_notations(Command_Expand_notations&& from) noexcept
    : Command_Expand_notations() {
    *this = ::std::move(from);
  }

  inline Command_Expand_notations& operator=(const Command_Expand_notations& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Expand_notations& operator=(Command_Expand_notations&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Expand_notations& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Expand_notations* internal_default_instance() {
    return reinterpret_cast<const Command_Expand_notations*>(
               &_Command_Expand_notations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Command_Expand_notations& a, Command_Expand_notations& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Expand_notations* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Expand_notations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Expand_notations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Expand_notations>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Command_Expand_notations& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Command_Expand_notations& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Server_Protocol.Command.Expand_notations";
  }
  protected:
  explicit Command_Expand_notations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Server_Protocol.Command.Expand_notations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_server_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Command_Compiled final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Server_Protocol.Command.Compiled) */ {
 public:
  inline Command_Compiled() : Command_Compiled(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Command_Compiled(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Compiled(const Command_Compiled& from);
  Command_Compiled(Command_Compiled&& from) noexcept
    : Command_Compiled() {
    *this = ::std::move(from);
  }

  inline Command_Compiled& operator=(const Command_Compiled& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Compiled& operator=(Command_Compiled&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Compiled& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Compiled* internal_default_instance() {
    return reinterpret_cast<const Command_Compiled*>(
               &_Command_Compiled_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Command_Compiled& a, Command_Compiled& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Compiled* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Compiled* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Compiled* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Compiled>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Command_Compiled& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Command_Compiled& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Server_Protocol.Command.Compiled";
  }
  protected:
  explicit Command_Compiled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Server_Protocol.Command.Compiled)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_server_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Command_Interpreted final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Server_Protocol.Command.Interpreted) */ {
 public:
  inline Command_Interpreted() : Command_Interpreted(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Command_Interpreted(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Interpreted(const Command_Interpreted& from);
  Command_Interpreted(Command_Interpreted&& from) noexcept
    : Command_Interpreted() {
    *this = ::std::move(from);
  }

  inline Command_Interpreted& operator=(const Command_Interpreted& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Interpreted& operator=(Command_Interpreted&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Interpreted& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Interpreted* internal_default_instance() {
    return reinterpret_cast<const Command_Interpreted*>(
               &_Command_Interpreted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Command_Interpreted& a, Command_Interpreted& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Interpreted* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Interpreted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Interpreted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Interpreted>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Command_Interpreted& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Command_Interpreted& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Server_Protocol.Command.Interpreted";
  }
  protected:
  explicit Command_Interpreted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Server_Protocol.Command.Interpreted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_server_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Command_First_order final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Server_Protocol.Command.First_order) */ {
 public:
  inline Command_First_order() : Command_First_order(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Command_First_order(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_First_order(const Command_First_order& from);
  Command_First_order(Command_First_order&& from) noexcept
    : Command_First_order() {
    *this = ::std::move(from);
  }

  inline Command_First_order& operator=(const Command_First_order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_First_order& operator=(Command_First_order&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_First_order& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_First_order* internal_default_instance() {
    return reinterpret_cast<const Command_First_order*>(
               &_Command_First_order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Command_First_order& a, Command_First_order& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_First_order* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_First_order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_First_order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_First_order>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Command_First_order& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Command_First_order& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Server_Protocol.Command.First_order";
  }
  protected:
  explicit Command_First_order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Server_Protocol.Command.First_order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_server_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Command_Notation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Server_Protocol.Command.Notation) */ {
 public:
  inline Command_Notation() : Command_Notation(nullptr) {}
  ~Command_Notation() override;
  explicit PROTOBUF_CONSTEXPR Command_Notation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Notation(const Command_Notation& from);
  Command_Notation(Command_Notation&& from) noexcept
    : Command_Notation() {
    *this = ::std::move(from);
  }

  inline Command_Notation& operator=(const Command_Notation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Notation& operator=(Command_Notation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Notation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Notation* internal_default_instance() {
    return reinterpret_cast<const Command_Notation*>(
               &_Command_Notation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Command_Notation& a, Command_Notation& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Notation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Notation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Notation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Notation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Notation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Command_Notation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Notation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Server_Protocol.Command.Notation";
  }
  protected:
  explicit Command_Notation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kSyntaxFieldNumber = 3,
    kSemanticsFieldNumber = 4,
    kNameFieldNumber = 1,
  };
  // repeated string params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  const std::string& params(int index) const;
  std::string* mutable_params(int index);
  void set_params(int index, const std::string& value);
  void set_params(int index, std::string&& value);
  void set_params(int index, const char* value);
  void set_params(int index, const char* value, size_t size);
  std::string* add_params();
  void add_params(const std::string& value);
  void add_params(std::string&& value);
  void add_params(const char* value);
  void add_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_params();
  private:
  const std::string& _internal_params(int index) const;
  std::string* _internal_add_params();
  public:

  // repeated .Server_Protocol.Notation_element syntax = 3;
  int syntax_size() const;
  private:
  int _internal_syntax_size() const;
  public:
  void clear_syntax();
  ::Server_Protocol::Notation_element* mutable_syntax(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Server_Protocol::Notation_element >*
      mutable_syntax();
  private:
  const ::Server_Protocol::Notation_element& _internal_syntax(int index) const;
  ::Server_Protocol::Notation_element* _internal_add_syntax();
  public:
  const ::Server_Protocol::Notation_element& syntax(int index) const;
  ::Server_Protocol::Notation_element* add_syntax();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Server_Protocol::Notation_element >&
      syntax() const;

  // repeated .Server_Protocol.Notation_element semantics = 4;
  int semantics_size() const;
  private:
  int _internal_semantics_size() const;
  public:
  void clear_semantics();
  ::Server_Protocol::Notation_element* mutable_semantics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Server_Protocol::Notation_element >*
      mutable_semantics();
  private:
  const ::Server_Protocol::Notation_element& _internal_semantics(int index) const;
  ::Server_Protocol::Notation_element* _internal_add_semantics();
  public:
  const ::Server_Protocol::Notation_element& semantics(int index) const;
  ::Server_Protocol::Notation_element* add_semantics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Server_Protocol::Notation_element >&
      semantics() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Server_Protocol.Command.Notation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> params_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Server_Protocol::Notation_element > syntax_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Server_Protocol::Notation_element > semantics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Command_Theorem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Server_Protocol.Command.Theorem) */ {
 public:
  inline Command_Theorem() : Command_Theorem(nullptr) {}
  ~Command_Theorem() override;
  explicit PROTOBUF_CONSTEXPR Command_Theorem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Theorem(const Command_Theorem& from);
  Command_Theorem(Command_Theorem&& from) noexcept
    : Command_Theorem() {
    *this = ::std::move(from);
  }

  inline Command_Theorem& operator=(const Command_Theorem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Theorem& operator=(Command_Theorem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Theorem& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Theorem* internal_default_instance() {
    return reinterpret_cast<const Command_Theorem*>(
               &_Command_Theorem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Command_Theorem& a, Command_Theorem& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Theorem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Theorem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Theorem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Theorem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Theorem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Command_Theorem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Theorem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Server_Protocol.Command.Theorem";
  }
  protected:
  explicit Command_Theorem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kPremissesFieldNumber = 3,
    kDemonstrationFieldNumber = 5,
    kNameFieldNumber = 1,
    kConclusionFieldNumber = 4,
    kStatusFieldNumber = 6,
  };
  // repeated string params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  const std::string& params(int index) const;
  std::string* mutable_params(int index);
  void set_params(int index, const std::string& value);
  void set_params(int index, std::string&& value);
  void set_params(int index, const char* value);
  void set_params(int index, const char* value, size_t size);
  std::string* add_params();
  void add_params(const std::string& value);
  void add_params(std::string&& value);
  void add_params(const char* value);
  void add_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_params();
  private:
  const std::string& _internal_params(int index) const;
  std::string* _internal_add_params();
  public:

  // repeated string premisses = 3;
  int premisses_size() const;
  private:
  int _internal_premisses_size() const;
  public:
  void clear_premisses();
  const std::string& premisses(int index) const;
  std::string* mutable_premisses(int index);
  void set_premisses(int index, const std::string& value);
  void set_premisses(int index, std::string&& value);
  void set_premisses(int index, const char* value);
  void set_premisses(int index, const char* value, size_t size);
  std::string* add_premisses();
  void add_premisses(const std::string& value);
  void add_premisses(std::string&& value);
  void add_premisses(const char* value);
  void add_premisses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& premisses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_premisses();
  private:
  const std::string& _internal_premisses(int index) const;
  std::string* _internal_add_premisses();
  public:

  // repeated string demonstration = 5;
  int demonstration_size() const;
  private:
  int _internal_demonstration_size() const;
  public:
  void clear_demonstration();
  const std::string& demonstration(int index) const;
  std::string* mutable_demonstration(int index);
  void set_demonstration(int index, const std::string& value);
  void set_demonstration(int index, std::string&& value);
  void set_demonstration(int index, const char* value);
  void set_demonstration(int index, const char* value, size_t size);
  std::string* add_demonstration();
  void add_demonstration(const std::string& value);
  void add_demonstration(std::string&& value);
  void add_demonstration(const char* value);
  void add_demonstration(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& demonstration() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_demonstration();
  private:
  const std::string& _internal_demonstration(int index) const;
  std::string* _internal_add_demonstration();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string conclusion = 4;
  void clear_conclusion();
  const std::string& conclusion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conclusion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conclusion();
  PROTOBUF_NODISCARD std::string* release_conclusion();
  void set_allocated_conclusion(std::string* conclusion);
  private:
  const std::string& _internal_conclusion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conclusion(const std::string& value);
  std::string* _internal_mutable_conclusion();
  public:

  // .Server_Protocol.Status status = 6;
  void clear_status();
  ::Server_Protocol::Status status() const;
  void set_status(::Server_Protocol::Status value);
  private:
  ::Server_Protocol::Status _internal_status() const;
  void _internal_set_status(::Server_Protocol::Status value);
  public:

  // @@protoc_insertion_point(class_scope:Server_Protocol.Command.Theorem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> params_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> premisses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> demonstration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conclusion_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Command_Axiom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Server_Protocol.Command.Axiom) */ {
 public:
  inline Command_Axiom() : Command_Axiom(nullptr) {}
  ~Command_Axiom() override;
  explicit PROTOBUF_CONSTEXPR Command_Axiom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Axiom(const Command_Axiom& from);
  Command_Axiom(Command_Axiom&& from) noexcept
    : Command_Axiom() {
    *this = ::std::move(from);
  }

  inline Command_Axiom& operator=(const Command_Axiom& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Axiom& operator=(Command_Axiom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Axiom& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Axiom* internal_default_instance() {
    return reinterpret_cast<const Command_Axiom*>(
               &_Command_Axiom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Command_Axiom& a, Command_Axiom& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Axiom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Axiom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Axiom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Axiom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Axiom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Command_Axiom& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Axiom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Server_Protocol.Command.Axiom";
  }
  protected:
  explicit Command_Axiom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFormulaFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string formula = 2;
  void clear_formula();
  const std::string& formula() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_formula(ArgT0&& arg0, ArgT... args);
  std::string* mutable_formula();
  PROTOBUF_NODISCARD std::string* release_formula();
  void set_allocated_formula(std::string* formula);
  private:
  const std::string& _internal_formula() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_formula(const std::string& value);
  std::string* _internal_mutable_formula();
  public:

  // @@protoc_insertion_point(class_scope:Server_Protocol.Command.Axiom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr formula_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Command_History final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Server_Protocol.Command.History) */ {
 public:
  inline Command_History() : Command_History(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Command_History(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_History(const Command_History& from);
  Command_History(Command_History&& from) noexcept
    : Command_History() {
    *this = ::std::move(from);
  }

  inline Command_History& operator=(const Command_History& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_History& operator=(Command_History&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_History& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_History* internal_default_instance() {
    return reinterpret_cast<const Command_History*>(
               &_Command_History_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Command_History& a, Command_History& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_History* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_History* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_History* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_History>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Command_History& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Command_History& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Server_Protocol.Command.History";
  }
  protected:
  explicit Command_History(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Server_Protocol.Command.History)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_server_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Command_Quit final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Server_Protocol.Command.Quit) */ {
 public:
  inline Command_Quit() : Command_Quit(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Command_Quit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Quit(const Command_Quit& from);
  Command_Quit(Command_Quit&& from) noexcept
    : Command_Quit() {
    *this = ::std::move(from);
  }

  inline Command_Quit& operator=(const Command_Quit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Quit& operator=(Command_Quit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Quit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Quit* internal_default_instance() {
    return reinterpret_cast<const Command_Quit*>(
               &_Command_Quit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Command_Quit& a, Command_Quit& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Quit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Quit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Quit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Quit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Command_Quit& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Command_Quit& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Server_Protocol.Command.Quit";
  }
  protected:
  explicit Command_Quit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Server_Protocol.Command.Quit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_server_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Command final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Server_Protocol.Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  ~Command() override;
  explicit PROTOBUF_CONSTEXPR Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  enum TCase {
    kVerbose = 1,
    kProp = 2,
    kKeepNotations = 3,
    kExpandNotations = 4,
    kCompiled = 5,
    kInterpreted = 6,
    kSave = 7,
    kLoad = 8,
    kFirstOrder = 9,
    kNotation = 10,
    kTheorem = 11,
    kAxiom = 12,
    kHistory = 13,
    kShow = 14,
    kList = 15,
    kUser = 16,
    kQuit = 17,
    T_NOT_SET = 0,
  };

  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Command& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Server_Protocol.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Command_Prop Prop;
  typedef Command_File File;
  typedef Command_Keep_notations Keep_notations;
  typedef Command_Expand_notations Expand_notations;
  typedef Command_Compiled Compiled;
  typedef Command_Interpreted Interpreted;
  typedef Command_First_order First_order;
  typedef Command_Notation Notation;
  typedef Command_Theorem Theorem;
  typedef Command_Axiom Axiom;
  typedef Command_History History;
  typedef Command_Quit Quit;

  // accessors -------------------------------------------------------

  enum : int {
    kVerboseFieldNumber = 1,
    kPropFieldNumber = 2,
    kKeepNotationsFieldNumber = 3,
    kExpandNotationsFieldNumber = 4,
    kCompiledFieldNumber = 5,
    kInterpretedFieldNumber = 6,
    kSaveFieldNumber = 7,
    kLoadFieldNumber = 8,
    kFirstOrderFieldNumber = 9,
    kNotationFieldNumber = 10,
    kTheoremFieldNumber = 11,
    kAxiomFieldNumber = 12,
    kHistoryFieldNumber = 13,
    kShowFieldNumber = 14,
    kListFieldNumber = 15,
    kUserFieldNumber = 16,
    kQuitFieldNumber = 17,
  };
  // int32 verbose = 1;
  bool has_verbose() const;
  private:
  bool _internal_has_verbose() const;
  public:
  void clear_verbose();
  int32_t verbose() const;
  void set_verbose(int32_t value);
  private:
  int32_t _internal_verbose() const;
  void _internal_set_verbose(int32_t value);
  public:

  // .Server_Protocol.Command.Prop prop = 2;
  bool has_prop() const;
  private:
  bool _internal_has_prop() const;
  public:
  void clear_prop();
  const ::Server_Protocol::Command_Prop& prop() const;
  PROTOBUF_NODISCARD ::Server_Protocol::Command_Prop* release_prop();
  ::Server_Protocol::Command_Prop* mutable_prop();
  void set_allocated_prop(::Server_Protocol::Command_Prop* prop);
  private:
  const ::Server_Protocol::Command_Prop& _internal_prop() const;
  ::Server_Protocol::Command_Prop* _internal_mutable_prop();
  public:
  void unsafe_arena_set_allocated_prop(
      ::Server_Protocol::Command_Prop* prop);
  ::Server_Protocol::Command_Prop* unsafe_arena_release_prop();

  // .Server_Protocol.Command.Keep_notations keep_notations = 3;
  bool has_keep_notations() const;
  private:
  bool _internal_has_keep_notations() const;
  public:
  void clear_keep_notations();
  const ::Server_Protocol::Command_Keep_notations& keep_notations() const;
  PROTOBUF_NODISCARD ::Server_Protocol::Command_Keep_notations* release_keep_notations();
  ::Server_Protocol::Command_Keep_notations* mutable_keep_notations();
  void set_allocated_keep_notations(::Server_Protocol::Command_Keep_notations* keep_notations);
  private:
  const ::Server_Protocol::Command_Keep_notations& _internal_keep_notations() const;
  ::Server_Protocol::Command_Keep_notations* _internal_mutable_keep_notations();
  public:
  void unsafe_arena_set_allocated_keep_notations(
      ::Server_Protocol::Command_Keep_notations* keep_notations);
  ::Server_Protocol::Command_Keep_notations* unsafe_arena_release_keep_notations();

  // .Server_Protocol.Command.Expand_notations expand_notations = 4;
  bool has_expand_notations() const;
  private:
  bool _internal_has_expand_notations() const;
  public:
  void clear_expand_notations();
  const ::Server_Protocol::Command_Expand_notations& expand_notations() const;
  PROTOBUF_NODISCARD ::Server_Protocol::Command_Expand_notations* release_expand_notations();
  ::Server_Protocol::Command_Expand_notations* mutable_expand_notations();
  void set_allocated_expand_notations(::Server_Protocol::Command_Expand_notations* expand_notations);
  private:
  const ::Server_Protocol::Command_Expand_notations& _internal_expand_notations() const;
  ::Server_Protocol::Command_Expand_notations* _internal_mutable_expand_notations();
  public:
  void unsafe_arena_set_allocated_expand_notations(
      ::Server_Protocol::Command_Expand_notations* expand_notations);
  ::Server_Protocol::Command_Expand_notations* unsafe_arena_release_expand_notations();

  // .Server_Protocol.Command.Compiled compiled = 5;
  bool has_compiled() const;
  private:
  bool _internal_has_compiled() const;
  public:
  void clear_compiled();
  const ::Server_Protocol::Command_Compiled& compiled() const;
  PROTOBUF_NODISCARD ::Server_Protocol::Command_Compiled* release_compiled();
  ::Server_Protocol::Command_Compiled* mutable_compiled();
  void set_allocated_compiled(::Server_Protocol::Command_Compiled* compiled);
  private:
  const ::Server_Protocol::Command_Compiled& _internal_compiled() const;
  ::Server_Protocol::Command_Compiled* _internal_mutable_compiled();
  public:
  void unsafe_arena_set_allocated_compiled(
      ::Server_Protocol::Command_Compiled* compiled);
  ::Server_Protocol::Command_Compiled* unsafe_arena_release_compiled();

  // .Server_Protocol.Command.Interpreted interpreted = 6;
  bool has_interpreted() const;
  private:
  bool _internal_has_interpreted() const;
  public:
  void clear_interpreted();
  const ::Server_Protocol::Command_Interpreted& interpreted() const;
  PROTOBUF_NODISCARD ::Server_Protocol::Command_Interpreted* release_interpreted();
  ::Server_Protocol::Command_Interpreted* mutable_interpreted();
  void set_allocated_interpreted(::Server_Protocol::Command_Interpreted* interpreted);
  private:
  const ::Server_Protocol::Command_Interpreted& _internal_interpreted() const;
  ::Server_Protocol::Command_Interpreted* _internal_mutable_interpreted();
  public:
  void unsafe_arena_set_allocated_interpreted(
      ::Server_Protocol::Command_Interpreted* interpreted);
  ::Server_Protocol::Command_Interpreted* unsafe_arena_release_interpreted();

  // .Server_Protocol.Command.File save = 7;
  bool has_save() const;
  private:
  bool _internal_has_save() const;
  public:
  void clear_save();
  const ::Server_Protocol::Command_File& save() const;
  PROTOBUF_NODISCARD ::Server_Protocol::Command_File* release_save();
  ::Server_Protocol::Command_File* mutable_save();
  void set_allocated_save(::Server_Protocol::Command_File* save);
  private:
  const ::Server_Protocol::Command_File& _internal_save() const;
  ::Server_Protocol::Command_File* _internal_mutable_save();
  public:
  void unsafe_arena_set_allocated_save(
      ::Server_Protocol::Command_File* save);
  ::Server_Protocol::Command_File* unsafe_arena_release_save();

  // .Server_Protocol.Command.File load = 8;
  bool has_load() const;
  private:
  bool _internal_has_load() const;
  public:
  void clear_load();
  const ::Server_Protocol::Command_File& load() const;
  PROTOBUF_NODISCARD ::Server_Protocol::Command_File* release_load();
  ::Server_Protocol::Command_File* mutable_load();
  void set_allocated_load(::Server_Protocol::Command_File* load);
  private:
  const ::Server_Protocol::Command_File& _internal_load() const;
  ::Server_Protocol::Command_File* _internal_mutable_load();
  public:
  void unsafe_arena_set_allocated_load(
      ::Server_Protocol::Command_File* load);
  ::Server_Protocol::Command_File* unsafe_arena_release_load();

  // .Server_Protocol.Command.First_order first_order = 9;
  bool has_first_order() const;
  private:
  bool _internal_has_first_order() const;
  public:
  void clear_first_order();
  const ::Server_Protocol::Command_First_order& first_order() const;
  PROTOBUF_NODISCARD ::Server_Protocol::Command_First_order* release_first_order();
  ::Server_Protocol::Command_First_order* mutable_first_order();
  void set_allocated_first_order(::Server_Protocol::Command_First_order* first_order);
  private:
  const ::Server_Protocol::Command_First_order& _internal_first_order() const;
  ::Server_Protocol::Command_First_order* _internal_mutable_first_order();
  public:
  void unsafe_arena_set_allocated_first_order(
      ::Server_Protocol::Command_First_order* first_order);
  ::Server_Protocol::Command_First_order* unsafe_arena_release_first_order();

  // .Server_Protocol.Command.Notation notation = 10;
  bool has_notation() const;
  private:
  bool _internal_has_notation() const;
  public:
  void clear_notation();
  const ::Server_Protocol::Command_Notation& notation() const;
  PROTOBUF_NODISCARD ::Server_Protocol::Command_Notation* release_notation();
  ::Server_Protocol::Command_Notation* mutable_notation();
  void set_allocated_notation(::Server_Protocol::Command_Notation* notation);
  private:
  const ::Server_Protocol::Command_Notation& _internal_notation() const;
  ::Server_Protocol::Command_Notation* _internal_mutable_notation();
  public:
  void unsafe_arena_set_allocated_notation(
      ::Server_Protocol::Command_Notation* notation);
  ::Server_Protocol::Command_Notation* unsafe_arena_release_notation();

  // .Server_Protocol.Command.Theorem theorem = 11;
  bool has_theorem() const;
  private:
  bool _internal_has_theorem() const;
  public:
  void clear_theorem();
  const ::Server_Protocol::Command_Theorem& theorem() const;
  PROTOBUF_NODISCARD ::Server_Protocol::Command_Theorem* release_theorem();
  ::Server_Protocol::Command_Theorem* mutable_theorem();
  void set_allocated_theorem(::Server_Protocol::Command_Theorem* theorem);
  private:
  const ::Server_Protocol::Command_Theorem& _internal_theorem() const;
  ::Server_Protocol::Command_Theorem* _internal_mutable_theorem();
  public:
  void unsafe_arena_set_allocated_theorem(
      ::Server_Protocol::Command_Theorem* theorem);
  ::Server_Protocol::Command_Theorem* unsafe_arena_release_theorem();

  // .Server_Protocol.Command.Axiom axiom = 12;
  bool has_axiom() const;
  private:
  bool _internal_has_axiom() const;
  public:
  void clear_axiom();
  const ::Server_Protocol::Command_Axiom& axiom() const;
  PROTOBUF_NODISCARD ::Server_Protocol::Command_Axiom* release_axiom();
  ::Server_Protocol::Command_Axiom* mutable_axiom();
  void set_allocated_axiom(::Server_Protocol::Command_Axiom* axiom);
  private:
  const ::Server_Protocol::Command_Axiom& _internal_axiom() const;
  ::Server_Protocol::Command_Axiom* _internal_mutable_axiom();
  public:
  void unsafe_arena_set_allocated_axiom(
      ::Server_Protocol::Command_Axiom* axiom);
  ::Server_Protocol::Command_Axiom* unsafe_arena_release_axiom();

  // .Server_Protocol.Command.History history = 13;
  bool has_history() const;
  private:
  bool _internal_has_history() const;
  public:
  void clear_history();
  const ::Server_Protocol::Command_History& history() const;
  PROTOBUF_NODISCARD ::Server_Protocol::Command_History* release_history();
  ::Server_Protocol::Command_History* mutable_history();
  void set_allocated_history(::Server_Protocol::Command_History* history);
  private:
  const ::Server_Protocol::Command_History& _internal_history() const;
  ::Server_Protocol::Command_History* _internal_mutable_history();
  public:
  void unsafe_arena_set_allocated_history(
      ::Server_Protocol::Command_History* history);
  ::Server_Protocol::Command_History* unsafe_arena_release_history();

  // string show = 14;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const std::string& show() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_show(ArgT0&& arg0, ArgT... args);
  std::string* mutable_show();
  PROTOBUF_NODISCARD std::string* release_show();
  void set_allocated_show(std::string* show);
  private:
  const std::string& _internal_show() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_show(const std::string& value);
  std::string* _internal_mutable_show();
  public:

  // .Server_Protocol.Known list = 15;
  bool has_list() const;
  private:
  bool _internal_has_list() const;
  public:
  void clear_list();
  ::Server_Protocol::Known list() const;
  void set_list(::Server_Protocol::Known value);
  private:
  ::Server_Protocol::Known _internal_list() const;
  void _internal_set_list(::Server_Protocol::Known value);
  public:

  // string user = 16;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // .Server_Protocol.Command.Quit quit = 17;
  bool has_quit() const;
  private:
  bool _internal_has_quit() const;
  public:
  void clear_quit();
  const ::Server_Protocol::Command_Quit& quit() const;
  PROTOBUF_NODISCARD ::Server_Protocol::Command_Quit* release_quit();
  ::Server_Protocol::Command_Quit* mutable_quit();
  void set_allocated_quit(::Server_Protocol::Command_Quit* quit);
  private:
  const ::Server_Protocol::Command_Quit& _internal_quit() const;
  ::Server_Protocol::Command_Quit* _internal_mutable_quit();
  public:
  void unsafe_arena_set_allocated_quit(
      ::Server_Protocol::Command_Quit* quit);
  ::Server_Protocol::Command_Quit* unsafe_arena_release_quit();

  void clear_t();
  TCase t_case() const;
  // @@protoc_insertion_point(class_scope:Server_Protocol.Command)
 private:
  class _Internal;
  void set_has_verbose();
  void set_has_prop();
  void set_has_keep_notations();
  void set_has_expand_notations();
  void set_has_compiled();
  void set_has_interpreted();
  void set_has_save();
  void set_has_load();
  void set_has_first_order();
  void set_has_notation();
  void set_has_theorem();
  void set_has_axiom();
  void set_has_history();
  void set_has_show();
  void set_has_list();
  void set_has_user();
  void set_has_quit();

  inline bool has_t() const;
  inline void clear_has_t();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TUnion {
    constexpr TUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int32_t verbose_;
    ::Server_Protocol::Command_Prop* prop_;
    ::Server_Protocol::Command_Keep_notations* keep_notations_;
    ::Server_Protocol::Command_Expand_notations* expand_notations_;
    ::Server_Protocol::Command_Compiled* compiled_;
    ::Server_Protocol::Command_Interpreted* interpreted_;
    ::Server_Protocol::Command_File* save_;
    ::Server_Protocol::Command_File* load_;
    ::Server_Protocol::Command_First_order* first_order_;
    ::Server_Protocol::Command_Notation* notation_;
    ::Server_Protocol::Command_Theorem* theorem_;
    ::Server_Protocol::Command_Axiom* axiom_;
    ::Server_Protocol::Command_History* history_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr show_;
    int list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
    ::Server_Protocol::Command_Quit* quit_;
  } t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_server_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Answer_Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Server_Protocol.Answer.Error) */ {
 public:
  inline Answer_Error() : Answer_Error(nullptr) {}
  ~Answer_Error() override;
  explicit PROTOBUF_CONSTEXPR Answer_Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Answer_Error(const Answer_Error& from);
  Answer_Error(Answer_Error&& from) noexcept
    : Answer_Error() {
    *this = ::std::move(from);
  }

  inline Answer_Error& operator=(const Answer_Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Answer_Error& operator=(Answer_Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Answer_Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const Answer_Error* internal_default_instance() {
    return reinterpret_cast<const Answer_Error*>(
               &_Answer_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Answer_Error& a, Answer_Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Answer_Error* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Answer_Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Answer_Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Answer_Error>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Answer_Error& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Answer_Error& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Answer_Error* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Server_Protocol.Answer.Error";
  }
  protected:
  explicit Answer_Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 1,
    kCommandFieldNumber = 2,
  };
  // string error_message = 1;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .Server_Protocol.Command command = 2;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::Server_Protocol::Command& command() const;
  PROTOBUF_NODISCARD ::Server_Protocol::Command* release_command();
  ::Server_Protocol::Command* mutable_command();
  void set_allocated_command(::Server_Protocol::Command* command);
  private:
  const ::Server_Protocol::Command& _internal_command() const;
  ::Server_Protocol::Command* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::Server_Protocol::Command* command);
  ::Server_Protocol::Command* unsafe_arena_release_command();

  // @@protoc_insertion_point(class_scope:Server_Protocol.Answer.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::Server_Protocol::Command* command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Answer_Latex_answer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Server_Protocol.Answer.Latex_answer) */ {
 public:
  inline Answer_Latex_answer() : Answer_Latex_answer(nullptr) {}
  ~Answer_Latex_answer() override;
  explicit PROTOBUF_CONSTEXPR Answer_Latex_answer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Answer_Latex_answer(const Answer_Latex_answer& from);
  Answer_Latex_answer(Answer_Latex_answer&& from) noexcept
    : Answer_Latex_answer() {
    *this = ::std::move(from);
  }

  inline Answer_Latex_answer& operator=(const Answer_Latex_answer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Answer_Latex_answer& operator=(Answer_Latex_answer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Answer_Latex_answer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Answer_Latex_answer* internal_default_instance() {
    return reinterpret_cast<const Answer_Latex_answer*>(
               &_Answer_Latex_answer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Answer_Latex_answer& a, Answer_Latex_answer& b) {
    a.Swap(&b);
  }
  inline void Swap(Answer_Latex_answer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Answer_Latex_answer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Answer_Latex_answer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Answer_Latex_answer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Answer_Latex_answer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Answer_Latex_answer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Answer_Latex_answer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Server_Protocol.Answer.Latex_answer";
  }
  protected:
  explicit Answer_Latex_answer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerFieldNumber = 2,
    kModeFieldNumber = 1,
  };
  // string answer = 2;
  void clear_answer();
  const std::string& answer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_answer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_answer();
  PROTOBUF_NODISCARD std::string* release_answer();
  void set_allocated_answer(std::string* answer);
  private:
  const std::string& _internal_answer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_answer(const std::string& value);
  std::string* _internal_mutable_answer();
  public:

  // .Server_Protocol.Latex_mode mode = 1;
  void clear_mode();
  ::Server_Protocol::Latex_mode mode() const;
  void set_mode(::Server_Protocol::Latex_mode value);
  private:
  ::Server_Protocol::Latex_mode _internal_mode() const;
  void _internal_set_mode(::Server_Protocol::Latex_mode value);
  public:

  // @@protoc_insertion_point(class_scope:Server_Protocol.Answer.Latex_answer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Answer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Server_Protocol.Answer) */ {
 public:
  inline Answer() : Answer(nullptr) {}
  ~Answer() override;
  explicit PROTOBUF_CONSTEXPR Answer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Answer(const Answer& from);
  Answer(Answer&& from) noexcept
    : Answer() {
    *this = ::std::move(from);
  }

  inline Answer& operator=(const Answer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Answer& operator=(Answer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Answer& default_instance() {
    return *internal_default_instance();
  }
  enum TCase {
    kOk = 1,
    kError = 2,
    kAnswer = 3,
    T_NOT_SET = 0,
  };

  static inline const Answer* internal_default_instance() {
    return reinterpret_cast<const Answer*>(
               &_Answer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Answer& a, Answer& b) {
    a.Swap(&b);
  }
  inline void Swap(Answer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Answer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Answer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Answer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Answer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Answer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Answer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Server_Protocol.Answer";
  }
  protected:
  explicit Answer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Answer_Error Error;
  typedef Answer_Latex_answer Latex_answer;

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
    kErrorFieldNumber = 2,
    kAnswerFieldNumber = 3,
  };
  // .Server_Protocol.Command ok = 1;
  bool has_ok() const;
  private:
  bool _internal_has_ok() const;
  public:
  void clear_ok();
  const ::Server_Protocol::Command& ok() const;
  PROTOBUF_NODISCARD ::Server_Protocol::Command* release_ok();
  ::Server_Protocol::Command* mutable_ok();
  void set_allocated_ok(::Server_Protocol::Command* ok);
  private:
  const ::Server_Protocol::Command& _internal_ok() const;
  ::Server_Protocol::Command* _internal_mutable_ok();
  public:
  void unsafe_arena_set_allocated_ok(
      ::Server_Protocol::Command* ok);
  ::Server_Protocol::Command* unsafe_arena_release_ok();

  // .Server_Protocol.Answer.Error error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Server_Protocol::Answer_Error& error() const;
  PROTOBUF_NODISCARD ::Server_Protocol::Answer_Error* release_error();
  ::Server_Protocol::Answer_Error* mutable_error();
  void set_allocated_error(::Server_Protocol::Answer_Error* error);
  private:
  const ::Server_Protocol::Answer_Error& _internal_error() const;
  ::Server_Protocol::Answer_Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Server_Protocol::Answer_Error* error);
  ::Server_Protocol::Answer_Error* unsafe_arena_release_error();

  // .Server_Protocol.Answer.Latex_answer answer = 3;
  bool has_answer() const;
  private:
  bool _internal_has_answer() const;
  public:
  void clear_answer();
  const ::Server_Protocol::Answer_Latex_answer& answer() const;
  PROTOBUF_NODISCARD ::Server_Protocol::Answer_Latex_answer* release_answer();
  ::Server_Protocol::Answer_Latex_answer* mutable_answer();
  void set_allocated_answer(::Server_Protocol::Answer_Latex_answer* answer);
  private:
  const ::Server_Protocol::Answer_Latex_answer& _internal_answer() const;
  ::Server_Protocol::Answer_Latex_answer* _internal_mutable_answer();
  public:
  void unsafe_arena_set_allocated_answer(
      ::Server_Protocol::Answer_Latex_answer* answer);
  ::Server_Protocol::Answer_Latex_answer* unsafe_arena_release_answer();

  void clear_t();
  TCase t_case() const;
  // @@protoc_insertion_point(class_scope:Server_Protocol.Answer)
 private:
  class _Internal;
  void set_has_ok();
  void set_has_error();
  void set_has_answer();

  inline bool has_t() const;
  inline void clear_has_t();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TUnion {
    constexpr TUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::Server_Protocol::Command* ok_;
    ::Server_Protocol::Answer_Error* error_;
    ::Server_Protocol::Answer_Latex_answer* answer_;
  } t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_server_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Notation_element

// string param = 1;
inline bool Notation_element::_internal_has_param() const {
  return t_case() == kParam;
}
inline bool Notation_element::has_param() const {
  return _internal_has_param();
}
inline void Notation_element::set_has_param() {
  _oneof_case_[0] = kParam;
}
inline void Notation_element::clear_param() {
  if (_internal_has_param()) {
    t_.param_.Destroy();
    clear_has_t();
  }
}
inline const std::string& Notation_element::param() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Notation_element.param)
  return _internal_param();
}
template <typename ArgT0, typename... ArgT>
inline void Notation_element::set_param(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_param()) {
    clear_t();
    set_has_param();
    t_.param_.InitDefault();
  }
  t_.param_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Server_Protocol.Notation_element.param)
}
inline std::string* Notation_element::mutable_param() {
  std::string* _s = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Notation_element.param)
  return _s;
}
inline const std::string& Notation_element::_internal_param() const {
  if (_internal_has_param()) {
    return t_.param_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Notation_element::_internal_set_param(const std::string& value) {
  if (!_internal_has_param()) {
    clear_t();
    set_has_param();
    t_.param_.InitDefault();
  }
  t_.param_.Set(value, GetArenaForAllocation());
}
inline std::string* Notation_element::_internal_mutable_param() {
  if (!_internal_has_param()) {
    clear_t();
    set_has_param();
    t_.param_.InitDefault();
  }
  return t_.param_.Mutable(      GetArenaForAllocation());
}
inline std::string* Notation_element::release_param() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Notation_element.param)
  if (_internal_has_param()) {
    clear_has_t();
    return t_.param_.Release();
  } else {
    return nullptr;
  }
}
inline void Notation_element::set_allocated_param(std::string* param) {
  if (has_t()) {
    clear_t();
  }
  if (param != nullptr) {
    set_has_param();
    t_.param_.InitAllocated(param, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:Server_Protocol.Notation_element.param)
}

// string string = 2;
inline bool Notation_element::_internal_has_string() const {
  return t_case() == kString;
}
inline bool Notation_element::has_string() const {
  return _internal_has_string();
}
inline void Notation_element::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void Notation_element::clear_string() {
  if (_internal_has_string()) {
    t_.string_.Destroy();
    clear_has_t();
  }
}
inline const std::string& Notation_element::string() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Notation_element.string)
  return _internal_string();
}
template <typename ArgT0, typename... ArgT>
inline void Notation_element::set_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string()) {
    clear_t();
    set_has_string();
    t_.string_.InitDefault();
  }
  t_.string_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Server_Protocol.Notation_element.string)
}
inline std::string* Notation_element::mutable_string() {
  std::string* _s = _internal_mutable_string();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Notation_element.string)
  return _s;
}
inline const std::string& Notation_element::_internal_string() const {
  if (_internal_has_string()) {
    return t_.string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Notation_element::_internal_set_string(const std::string& value) {
  if (!_internal_has_string()) {
    clear_t();
    set_has_string();
    t_.string_.InitDefault();
  }
  t_.string_.Set(value, GetArenaForAllocation());
}
inline std::string* Notation_element::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_t();
    set_has_string();
    t_.string_.InitDefault();
  }
  return t_.string_.Mutable(      GetArenaForAllocation());
}
inline std::string* Notation_element::release_string() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Notation_element.string)
  if (_internal_has_string()) {
    clear_has_t();
    return t_.string_.Release();
  } else {
    return nullptr;
  }
}
inline void Notation_element::set_allocated_string(std::string* string) {
  if (has_t()) {
    clear_t();
  }
  if (string != nullptr) {
    set_has_string();
    t_.string_.InitAllocated(string, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:Server_Protocol.Notation_element.string)
}

inline bool Notation_element::has_t() const {
  return t_case() != T_NOT_SET;
}
inline void Notation_element::clear_has_t() {
  _oneof_case_[0] = T_NOT_SET;
}
inline Notation_element::TCase Notation_element::t_case() const {
  return Notation_element::TCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Command_Prop

// -------------------------------------------------------------------

// Command_File

// .Server_Protocol.File_mode mode = 1;
inline void Command_File::clear_mode() {
  mode_ = 0;
}
inline ::Server_Protocol::File_mode Command_File::_internal_mode() const {
  return static_cast< ::Server_Protocol::File_mode >(mode_);
}
inline ::Server_Protocol::File_mode Command_File::mode() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.File.mode)
  return _internal_mode();
}
inline void Command_File::_internal_set_mode(::Server_Protocol::File_mode value) {
  
  mode_ = value;
}
inline void Command_File::set_mode(::Server_Protocol::File_mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.File.mode)
}

// string filename = 2;
inline void Command_File::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& Command_File::filename() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.File.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_File::set_filename(ArgT0&& arg0, ArgT... args) {
 
 filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.File.filename)
}
inline std::string* Command_File::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.File.filename)
  return _s;
}
inline const std::string& Command_File::_internal_filename() const {
  return filename_.Get();
}
inline void Command_File::_internal_set_filename(const std::string& value) {
  
  filename_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_File::_internal_mutable_filename() {
  
  return filename_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_File::release_filename() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.File.filename)
  return filename_.Release();
}
inline void Command_File::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault()) {
    filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Server_Protocol.Command.File.filename)
}

// -------------------------------------------------------------------

// Command_Keep_notations

// -------------------------------------------------------------------

// Command_Expand_notations

// -------------------------------------------------------------------

// Command_Compiled

// -------------------------------------------------------------------

// Command_Interpreted

// -------------------------------------------------------------------

// Command_First_order

// -------------------------------------------------------------------

// Command_Notation

// string name = 1;
inline void Command_Notation::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Command_Notation::name() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.Notation.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Notation::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.Notation.name)
}
inline std::string* Command_Notation::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.Notation.name)
  return _s;
}
inline const std::string& Command_Notation::_internal_name() const {
  return name_.Get();
}
inline void Command_Notation::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Notation::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Notation::release_name() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.Notation.name)
  return name_.Release();
}
inline void Command_Notation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Server_Protocol.Command.Notation.name)
}

// repeated string params = 2;
inline int Command_Notation::_internal_params_size() const {
  return params_.size();
}
inline int Command_Notation::params_size() const {
  return _internal_params_size();
}
inline void Command_Notation::clear_params() {
  params_.Clear();
}
inline std::string* Command_Notation::add_params() {
  std::string* _s = _internal_add_params();
  // @@protoc_insertion_point(field_add_mutable:Server_Protocol.Command.Notation.params)
  return _s;
}
inline const std::string& Command_Notation::_internal_params(int index) const {
  return params_.Get(index);
}
inline const std::string& Command_Notation::params(int index) const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.Notation.params)
  return _internal_params(index);
}
inline std::string* Command_Notation::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.Notation.params)
  return params_.Mutable(index);
}
inline void Command_Notation::set_params(int index, const std::string& value) {
  params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.Notation.params)
}
inline void Command_Notation::set_params(int index, std::string&& value) {
  params_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.Notation.params)
}
inline void Command_Notation::set_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Server_Protocol.Command.Notation.params)
}
inline void Command_Notation::set_params(int index, const char* value, size_t size) {
  params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Server_Protocol.Command.Notation.params)
}
inline std::string* Command_Notation::_internal_add_params() {
  return params_.Add();
}
inline void Command_Notation::add_params(const std::string& value) {
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Server_Protocol.Command.Notation.params)
}
inline void Command_Notation::add_params(std::string&& value) {
  params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Server_Protocol.Command.Notation.params)
}
inline void Command_Notation::add_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Server_Protocol.Command.Notation.params)
}
inline void Command_Notation::add_params(const char* value, size_t size) {
  params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Server_Protocol.Command.Notation.params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Command_Notation::params() const {
  // @@protoc_insertion_point(field_list:Server_Protocol.Command.Notation.params)
  return params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Command_Notation::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Server_Protocol.Command.Notation.params)
  return &params_;
}

// repeated .Server_Protocol.Notation_element syntax = 3;
inline int Command_Notation::_internal_syntax_size() const {
  return syntax_.size();
}
inline int Command_Notation::syntax_size() const {
  return _internal_syntax_size();
}
inline void Command_Notation::clear_syntax() {
  syntax_.Clear();
}
inline ::Server_Protocol::Notation_element* Command_Notation::mutable_syntax(int index) {
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.Notation.syntax)
  return syntax_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Server_Protocol::Notation_element >*
Command_Notation::mutable_syntax() {
  // @@protoc_insertion_point(field_mutable_list:Server_Protocol.Command.Notation.syntax)
  return &syntax_;
}
inline const ::Server_Protocol::Notation_element& Command_Notation::_internal_syntax(int index) const {
  return syntax_.Get(index);
}
inline const ::Server_Protocol::Notation_element& Command_Notation::syntax(int index) const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.Notation.syntax)
  return _internal_syntax(index);
}
inline ::Server_Protocol::Notation_element* Command_Notation::_internal_add_syntax() {
  return syntax_.Add();
}
inline ::Server_Protocol::Notation_element* Command_Notation::add_syntax() {
  ::Server_Protocol::Notation_element* _add = _internal_add_syntax();
  // @@protoc_insertion_point(field_add:Server_Protocol.Command.Notation.syntax)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Server_Protocol::Notation_element >&
Command_Notation::syntax() const {
  // @@protoc_insertion_point(field_list:Server_Protocol.Command.Notation.syntax)
  return syntax_;
}

// repeated .Server_Protocol.Notation_element semantics = 4;
inline int Command_Notation::_internal_semantics_size() const {
  return semantics_.size();
}
inline int Command_Notation::semantics_size() const {
  return _internal_semantics_size();
}
inline void Command_Notation::clear_semantics() {
  semantics_.Clear();
}
inline ::Server_Protocol::Notation_element* Command_Notation::mutable_semantics(int index) {
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.Notation.semantics)
  return semantics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Server_Protocol::Notation_element >*
Command_Notation::mutable_semantics() {
  // @@protoc_insertion_point(field_mutable_list:Server_Protocol.Command.Notation.semantics)
  return &semantics_;
}
inline const ::Server_Protocol::Notation_element& Command_Notation::_internal_semantics(int index) const {
  return semantics_.Get(index);
}
inline const ::Server_Protocol::Notation_element& Command_Notation::semantics(int index) const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.Notation.semantics)
  return _internal_semantics(index);
}
inline ::Server_Protocol::Notation_element* Command_Notation::_internal_add_semantics() {
  return semantics_.Add();
}
inline ::Server_Protocol::Notation_element* Command_Notation::add_semantics() {
  ::Server_Protocol::Notation_element* _add = _internal_add_semantics();
  // @@protoc_insertion_point(field_add:Server_Protocol.Command.Notation.semantics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Server_Protocol::Notation_element >&
Command_Notation::semantics() const {
  // @@protoc_insertion_point(field_list:Server_Protocol.Command.Notation.semantics)
  return semantics_;
}

// -------------------------------------------------------------------

// Command_Theorem

// string name = 1;
inline void Command_Theorem::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Command_Theorem::name() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.Theorem.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Theorem::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.Theorem.name)
}
inline std::string* Command_Theorem::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.Theorem.name)
  return _s;
}
inline const std::string& Command_Theorem::_internal_name() const {
  return name_.Get();
}
inline void Command_Theorem::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Theorem::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Theorem::release_name() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.Theorem.name)
  return name_.Release();
}
inline void Command_Theorem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Server_Protocol.Command.Theorem.name)
}

// repeated string params = 2;
inline int Command_Theorem::_internal_params_size() const {
  return params_.size();
}
inline int Command_Theorem::params_size() const {
  return _internal_params_size();
}
inline void Command_Theorem::clear_params() {
  params_.Clear();
}
inline std::string* Command_Theorem::add_params() {
  std::string* _s = _internal_add_params();
  // @@protoc_insertion_point(field_add_mutable:Server_Protocol.Command.Theorem.params)
  return _s;
}
inline const std::string& Command_Theorem::_internal_params(int index) const {
  return params_.Get(index);
}
inline const std::string& Command_Theorem::params(int index) const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.Theorem.params)
  return _internal_params(index);
}
inline std::string* Command_Theorem::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.Theorem.params)
  return params_.Mutable(index);
}
inline void Command_Theorem::set_params(int index, const std::string& value) {
  params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.Theorem.params)
}
inline void Command_Theorem::set_params(int index, std::string&& value) {
  params_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.Theorem.params)
}
inline void Command_Theorem::set_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Server_Protocol.Command.Theorem.params)
}
inline void Command_Theorem::set_params(int index, const char* value, size_t size) {
  params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Server_Protocol.Command.Theorem.params)
}
inline std::string* Command_Theorem::_internal_add_params() {
  return params_.Add();
}
inline void Command_Theorem::add_params(const std::string& value) {
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Server_Protocol.Command.Theorem.params)
}
inline void Command_Theorem::add_params(std::string&& value) {
  params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Server_Protocol.Command.Theorem.params)
}
inline void Command_Theorem::add_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Server_Protocol.Command.Theorem.params)
}
inline void Command_Theorem::add_params(const char* value, size_t size) {
  params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Server_Protocol.Command.Theorem.params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Command_Theorem::params() const {
  // @@protoc_insertion_point(field_list:Server_Protocol.Command.Theorem.params)
  return params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Command_Theorem::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Server_Protocol.Command.Theorem.params)
  return &params_;
}

// repeated string premisses = 3;
inline int Command_Theorem::_internal_premisses_size() const {
  return premisses_.size();
}
inline int Command_Theorem::premisses_size() const {
  return _internal_premisses_size();
}
inline void Command_Theorem::clear_premisses() {
  premisses_.Clear();
}
inline std::string* Command_Theorem::add_premisses() {
  std::string* _s = _internal_add_premisses();
  // @@protoc_insertion_point(field_add_mutable:Server_Protocol.Command.Theorem.premisses)
  return _s;
}
inline const std::string& Command_Theorem::_internal_premisses(int index) const {
  return premisses_.Get(index);
}
inline const std::string& Command_Theorem::premisses(int index) const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.Theorem.premisses)
  return _internal_premisses(index);
}
inline std::string* Command_Theorem::mutable_premisses(int index) {
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.Theorem.premisses)
  return premisses_.Mutable(index);
}
inline void Command_Theorem::set_premisses(int index, const std::string& value) {
  premisses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.Theorem.premisses)
}
inline void Command_Theorem::set_premisses(int index, std::string&& value) {
  premisses_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.Theorem.premisses)
}
inline void Command_Theorem::set_premisses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  premisses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Server_Protocol.Command.Theorem.premisses)
}
inline void Command_Theorem::set_premisses(int index, const char* value, size_t size) {
  premisses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Server_Protocol.Command.Theorem.premisses)
}
inline std::string* Command_Theorem::_internal_add_premisses() {
  return premisses_.Add();
}
inline void Command_Theorem::add_premisses(const std::string& value) {
  premisses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Server_Protocol.Command.Theorem.premisses)
}
inline void Command_Theorem::add_premisses(std::string&& value) {
  premisses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Server_Protocol.Command.Theorem.premisses)
}
inline void Command_Theorem::add_premisses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  premisses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Server_Protocol.Command.Theorem.premisses)
}
inline void Command_Theorem::add_premisses(const char* value, size_t size) {
  premisses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Server_Protocol.Command.Theorem.premisses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Command_Theorem::premisses() const {
  // @@protoc_insertion_point(field_list:Server_Protocol.Command.Theorem.premisses)
  return premisses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Command_Theorem::mutable_premisses() {
  // @@protoc_insertion_point(field_mutable_list:Server_Protocol.Command.Theorem.premisses)
  return &premisses_;
}

// string conclusion = 4;
inline void Command_Theorem::clear_conclusion() {
  conclusion_.ClearToEmpty();
}
inline const std::string& Command_Theorem::conclusion() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.Theorem.conclusion)
  return _internal_conclusion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Theorem::set_conclusion(ArgT0&& arg0, ArgT... args) {
 
 conclusion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.Theorem.conclusion)
}
inline std::string* Command_Theorem::mutable_conclusion() {
  std::string* _s = _internal_mutable_conclusion();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.Theorem.conclusion)
  return _s;
}
inline const std::string& Command_Theorem::_internal_conclusion() const {
  return conclusion_.Get();
}
inline void Command_Theorem::_internal_set_conclusion(const std::string& value) {
  
  conclusion_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Theorem::_internal_mutable_conclusion() {
  
  return conclusion_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Theorem::release_conclusion() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.Theorem.conclusion)
  return conclusion_.Release();
}
inline void Command_Theorem::set_allocated_conclusion(std::string* conclusion) {
  if (conclusion != nullptr) {
    
  } else {
    
  }
  conclusion_.SetAllocated(conclusion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (conclusion_.IsDefault()) {
    conclusion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Server_Protocol.Command.Theorem.conclusion)
}

// repeated string demonstration = 5;
inline int Command_Theorem::_internal_demonstration_size() const {
  return demonstration_.size();
}
inline int Command_Theorem::demonstration_size() const {
  return _internal_demonstration_size();
}
inline void Command_Theorem::clear_demonstration() {
  demonstration_.Clear();
}
inline std::string* Command_Theorem::add_demonstration() {
  std::string* _s = _internal_add_demonstration();
  // @@protoc_insertion_point(field_add_mutable:Server_Protocol.Command.Theorem.demonstration)
  return _s;
}
inline const std::string& Command_Theorem::_internal_demonstration(int index) const {
  return demonstration_.Get(index);
}
inline const std::string& Command_Theorem::demonstration(int index) const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.Theorem.demonstration)
  return _internal_demonstration(index);
}
inline std::string* Command_Theorem::mutable_demonstration(int index) {
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.Theorem.demonstration)
  return demonstration_.Mutable(index);
}
inline void Command_Theorem::set_demonstration(int index, const std::string& value) {
  demonstration_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.Theorem.demonstration)
}
inline void Command_Theorem::set_demonstration(int index, std::string&& value) {
  demonstration_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.Theorem.demonstration)
}
inline void Command_Theorem::set_demonstration(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  demonstration_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Server_Protocol.Command.Theorem.demonstration)
}
inline void Command_Theorem::set_demonstration(int index, const char* value, size_t size) {
  demonstration_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Server_Protocol.Command.Theorem.demonstration)
}
inline std::string* Command_Theorem::_internal_add_demonstration() {
  return demonstration_.Add();
}
inline void Command_Theorem::add_demonstration(const std::string& value) {
  demonstration_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Server_Protocol.Command.Theorem.demonstration)
}
inline void Command_Theorem::add_demonstration(std::string&& value) {
  demonstration_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Server_Protocol.Command.Theorem.demonstration)
}
inline void Command_Theorem::add_demonstration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  demonstration_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Server_Protocol.Command.Theorem.demonstration)
}
inline void Command_Theorem::add_demonstration(const char* value, size_t size) {
  demonstration_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Server_Protocol.Command.Theorem.demonstration)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Command_Theorem::demonstration() const {
  // @@protoc_insertion_point(field_list:Server_Protocol.Command.Theorem.demonstration)
  return demonstration_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Command_Theorem::mutable_demonstration() {
  // @@protoc_insertion_point(field_mutable_list:Server_Protocol.Command.Theorem.demonstration)
  return &demonstration_;
}

// .Server_Protocol.Status status = 6;
inline void Command_Theorem::clear_status() {
  status_ = 0;
}
inline ::Server_Protocol::Status Command_Theorem::_internal_status() const {
  return static_cast< ::Server_Protocol::Status >(status_);
}
inline ::Server_Protocol::Status Command_Theorem::status() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.Theorem.status)
  return _internal_status();
}
inline void Command_Theorem::_internal_set_status(::Server_Protocol::Status value) {
  
  status_ = value;
}
inline void Command_Theorem::set_status(::Server_Protocol::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.Theorem.status)
}

// -------------------------------------------------------------------

// Command_Axiom

// string name = 1;
inline void Command_Axiom::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Command_Axiom::name() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.Axiom.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Axiom::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.Axiom.name)
}
inline std::string* Command_Axiom::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.Axiom.name)
  return _s;
}
inline const std::string& Command_Axiom::_internal_name() const {
  return name_.Get();
}
inline void Command_Axiom::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Axiom::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Axiom::release_name() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.Axiom.name)
  return name_.Release();
}
inline void Command_Axiom::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Server_Protocol.Command.Axiom.name)
}

// string formula = 2;
inline void Command_Axiom::clear_formula() {
  formula_.ClearToEmpty();
}
inline const std::string& Command_Axiom::formula() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.Axiom.formula)
  return _internal_formula();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Axiom::set_formula(ArgT0&& arg0, ArgT... args) {
 
 formula_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.Axiom.formula)
}
inline std::string* Command_Axiom::mutable_formula() {
  std::string* _s = _internal_mutable_formula();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.Axiom.formula)
  return _s;
}
inline const std::string& Command_Axiom::_internal_formula() const {
  return formula_.Get();
}
inline void Command_Axiom::_internal_set_formula(const std::string& value) {
  
  formula_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Axiom::_internal_mutable_formula() {
  
  return formula_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Axiom::release_formula() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.Axiom.formula)
  return formula_.Release();
}
inline void Command_Axiom::set_allocated_formula(std::string* formula) {
  if (formula != nullptr) {
    
  } else {
    
  }
  formula_.SetAllocated(formula, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (formula_.IsDefault()) {
    formula_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Server_Protocol.Command.Axiom.formula)
}

// -------------------------------------------------------------------

// Command_History

// -------------------------------------------------------------------

// Command_Quit

// -------------------------------------------------------------------

// Command

// int32 verbose = 1;
inline bool Command::_internal_has_verbose() const {
  return t_case() == kVerbose;
}
inline bool Command::has_verbose() const {
  return _internal_has_verbose();
}
inline void Command::set_has_verbose() {
  _oneof_case_[0] = kVerbose;
}
inline void Command::clear_verbose() {
  if (_internal_has_verbose()) {
    t_.verbose_ = 0;
    clear_has_t();
  }
}
inline int32_t Command::_internal_verbose() const {
  if (_internal_has_verbose()) {
    return t_.verbose_;
  }
  return 0;
}
inline void Command::_internal_set_verbose(int32_t value) {
  if (!_internal_has_verbose()) {
    clear_t();
    set_has_verbose();
  }
  t_.verbose_ = value;
}
inline int32_t Command::verbose() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.verbose)
  return _internal_verbose();
}
inline void Command::set_verbose(int32_t value) {
  _internal_set_verbose(value);
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.verbose)
}

// .Server_Protocol.Command.Prop prop = 2;
inline bool Command::_internal_has_prop() const {
  return t_case() == kProp;
}
inline bool Command::has_prop() const {
  return _internal_has_prop();
}
inline void Command::set_has_prop() {
  _oneof_case_[0] = kProp;
}
inline void Command::clear_prop() {
  if (_internal_has_prop()) {
    if (GetArenaForAllocation() == nullptr) {
      delete t_.prop_;
    }
    clear_has_t();
  }
}
inline ::Server_Protocol::Command_Prop* Command::release_prop() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.prop)
  if (_internal_has_prop()) {
    clear_has_t();
    ::Server_Protocol::Command_Prop* temp = t_.prop_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    t_.prop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Server_Protocol::Command_Prop& Command::_internal_prop() const {
  return _internal_has_prop()
      ? *t_.prop_
      : reinterpret_cast< ::Server_Protocol::Command_Prop&>(::Server_Protocol::_Command_Prop_default_instance_);
}
inline const ::Server_Protocol::Command_Prop& Command::prop() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.prop)
  return _internal_prop();
}
inline ::Server_Protocol::Command_Prop* Command::unsafe_arena_release_prop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Server_Protocol.Command.prop)
  if (_internal_has_prop()) {
    clear_has_t();
    ::Server_Protocol::Command_Prop* temp = t_.prop_;
    t_.prop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_prop(::Server_Protocol::Command_Prop* prop) {
  clear_t();
  if (prop) {
    set_has_prop();
    t_.prop_ = prop;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Server_Protocol.Command.prop)
}
inline ::Server_Protocol::Command_Prop* Command::_internal_mutable_prop() {
  if (!_internal_has_prop()) {
    clear_t();
    set_has_prop();
    t_.prop_ = CreateMaybeMessage< ::Server_Protocol::Command_Prop >(GetArenaForAllocation());
  }
  return t_.prop_;
}
inline ::Server_Protocol::Command_Prop* Command::mutable_prop() {
  ::Server_Protocol::Command_Prop* _msg = _internal_mutable_prop();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.prop)
  return _msg;
}

// .Server_Protocol.Command.Keep_notations keep_notations = 3;
inline bool Command::_internal_has_keep_notations() const {
  return t_case() == kKeepNotations;
}
inline bool Command::has_keep_notations() const {
  return _internal_has_keep_notations();
}
inline void Command::set_has_keep_notations() {
  _oneof_case_[0] = kKeepNotations;
}
inline void Command::clear_keep_notations() {
  if (_internal_has_keep_notations()) {
    if (GetArenaForAllocation() == nullptr) {
      delete t_.keep_notations_;
    }
    clear_has_t();
  }
}
inline ::Server_Protocol::Command_Keep_notations* Command::release_keep_notations() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.keep_notations)
  if (_internal_has_keep_notations()) {
    clear_has_t();
    ::Server_Protocol::Command_Keep_notations* temp = t_.keep_notations_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    t_.keep_notations_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Server_Protocol::Command_Keep_notations& Command::_internal_keep_notations() const {
  return _internal_has_keep_notations()
      ? *t_.keep_notations_
      : reinterpret_cast< ::Server_Protocol::Command_Keep_notations&>(::Server_Protocol::_Command_Keep_notations_default_instance_);
}
inline const ::Server_Protocol::Command_Keep_notations& Command::keep_notations() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.keep_notations)
  return _internal_keep_notations();
}
inline ::Server_Protocol::Command_Keep_notations* Command::unsafe_arena_release_keep_notations() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Server_Protocol.Command.keep_notations)
  if (_internal_has_keep_notations()) {
    clear_has_t();
    ::Server_Protocol::Command_Keep_notations* temp = t_.keep_notations_;
    t_.keep_notations_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_keep_notations(::Server_Protocol::Command_Keep_notations* keep_notations) {
  clear_t();
  if (keep_notations) {
    set_has_keep_notations();
    t_.keep_notations_ = keep_notations;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Server_Protocol.Command.keep_notations)
}
inline ::Server_Protocol::Command_Keep_notations* Command::_internal_mutable_keep_notations() {
  if (!_internal_has_keep_notations()) {
    clear_t();
    set_has_keep_notations();
    t_.keep_notations_ = CreateMaybeMessage< ::Server_Protocol::Command_Keep_notations >(GetArenaForAllocation());
  }
  return t_.keep_notations_;
}
inline ::Server_Protocol::Command_Keep_notations* Command::mutable_keep_notations() {
  ::Server_Protocol::Command_Keep_notations* _msg = _internal_mutable_keep_notations();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.keep_notations)
  return _msg;
}

// .Server_Protocol.Command.Expand_notations expand_notations = 4;
inline bool Command::_internal_has_expand_notations() const {
  return t_case() == kExpandNotations;
}
inline bool Command::has_expand_notations() const {
  return _internal_has_expand_notations();
}
inline void Command::set_has_expand_notations() {
  _oneof_case_[0] = kExpandNotations;
}
inline void Command::clear_expand_notations() {
  if (_internal_has_expand_notations()) {
    if (GetArenaForAllocation() == nullptr) {
      delete t_.expand_notations_;
    }
    clear_has_t();
  }
}
inline ::Server_Protocol::Command_Expand_notations* Command::release_expand_notations() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.expand_notations)
  if (_internal_has_expand_notations()) {
    clear_has_t();
    ::Server_Protocol::Command_Expand_notations* temp = t_.expand_notations_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    t_.expand_notations_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Server_Protocol::Command_Expand_notations& Command::_internal_expand_notations() const {
  return _internal_has_expand_notations()
      ? *t_.expand_notations_
      : reinterpret_cast< ::Server_Protocol::Command_Expand_notations&>(::Server_Protocol::_Command_Expand_notations_default_instance_);
}
inline const ::Server_Protocol::Command_Expand_notations& Command::expand_notations() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.expand_notations)
  return _internal_expand_notations();
}
inline ::Server_Protocol::Command_Expand_notations* Command::unsafe_arena_release_expand_notations() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Server_Protocol.Command.expand_notations)
  if (_internal_has_expand_notations()) {
    clear_has_t();
    ::Server_Protocol::Command_Expand_notations* temp = t_.expand_notations_;
    t_.expand_notations_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_expand_notations(::Server_Protocol::Command_Expand_notations* expand_notations) {
  clear_t();
  if (expand_notations) {
    set_has_expand_notations();
    t_.expand_notations_ = expand_notations;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Server_Protocol.Command.expand_notations)
}
inline ::Server_Protocol::Command_Expand_notations* Command::_internal_mutable_expand_notations() {
  if (!_internal_has_expand_notations()) {
    clear_t();
    set_has_expand_notations();
    t_.expand_notations_ = CreateMaybeMessage< ::Server_Protocol::Command_Expand_notations >(GetArenaForAllocation());
  }
  return t_.expand_notations_;
}
inline ::Server_Protocol::Command_Expand_notations* Command::mutable_expand_notations() {
  ::Server_Protocol::Command_Expand_notations* _msg = _internal_mutable_expand_notations();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.expand_notations)
  return _msg;
}

// .Server_Protocol.Command.Compiled compiled = 5;
inline bool Command::_internal_has_compiled() const {
  return t_case() == kCompiled;
}
inline bool Command::has_compiled() const {
  return _internal_has_compiled();
}
inline void Command::set_has_compiled() {
  _oneof_case_[0] = kCompiled;
}
inline void Command::clear_compiled() {
  if (_internal_has_compiled()) {
    if (GetArenaForAllocation() == nullptr) {
      delete t_.compiled_;
    }
    clear_has_t();
  }
}
inline ::Server_Protocol::Command_Compiled* Command::release_compiled() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.compiled)
  if (_internal_has_compiled()) {
    clear_has_t();
    ::Server_Protocol::Command_Compiled* temp = t_.compiled_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    t_.compiled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Server_Protocol::Command_Compiled& Command::_internal_compiled() const {
  return _internal_has_compiled()
      ? *t_.compiled_
      : reinterpret_cast< ::Server_Protocol::Command_Compiled&>(::Server_Protocol::_Command_Compiled_default_instance_);
}
inline const ::Server_Protocol::Command_Compiled& Command::compiled() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.compiled)
  return _internal_compiled();
}
inline ::Server_Protocol::Command_Compiled* Command::unsafe_arena_release_compiled() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Server_Protocol.Command.compiled)
  if (_internal_has_compiled()) {
    clear_has_t();
    ::Server_Protocol::Command_Compiled* temp = t_.compiled_;
    t_.compiled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_compiled(::Server_Protocol::Command_Compiled* compiled) {
  clear_t();
  if (compiled) {
    set_has_compiled();
    t_.compiled_ = compiled;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Server_Protocol.Command.compiled)
}
inline ::Server_Protocol::Command_Compiled* Command::_internal_mutable_compiled() {
  if (!_internal_has_compiled()) {
    clear_t();
    set_has_compiled();
    t_.compiled_ = CreateMaybeMessage< ::Server_Protocol::Command_Compiled >(GetArenaForAllocation());
  }
  return t_.compiled_;
}
inline ::Server_Protocol::Command_Compiled* Command::mutable_compiled() {
  ::Server_Protocol::Command_Compiled* _msg = _internal_mutable_compiled();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.compiled)
  return _msg;
}

// .Server_Protocol.Command.Interpreted interpreted = 6;
inline bool Command::_internal_has_interpreted() const {
  return t_case() == kInterpreted;
}
inline bool Command::has_interpreted() const {
  return _internal_has_interpreted();
}
inline void Command::set_has_interpreted() {
  _oneof_case_[0] = kInterpreted;
}
inline void Command::clear_interpreted() {
  if (_internal_has_interpreted()) {
    if (GetArenaForAllocation() == nullptr) {
      delete t_.interpreted_;
    }
    clear_has_t();
  }
}
inline ::Server_Protocol::Command_Interpreted* Command::release_interpreted() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.interpreted)
  if (_internal_has_interpreted()) {
    clear_has_t();
    ::Server_Protocol::Command_Interpreted* temp = t_.interpreted_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    t_.interpreted_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Server_Protocol::Command_Interpreted& Command::_internal_interpreted() const {
  return _internal_has_interpreted()
      ? *t_.interpreted_
      : reinterpret_cast< ::Server_Protocol::Command_Interpreted&>(::Server_Protocol::_Command_Interpreted_default_instance_);
}
inline const ::Server_Protocol::Command_Interpreted& Command::interpreted() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.interpreted)
  return _internal_interpreted();
}
inline ::Server_Protocol::Command_Interpreted* Command::unsafe_arena_release_interpreted() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Server_Protocol.Command.interpreted)
  if (_internal_has_interpreted()) {
    clear_has_t();
    ::Server_Protocol::Command_Interpreted* temp = t_.interpreted_;
    t_.interpreted_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_interpreted(::Server_Protocol::Command_Interpreted* interpreted) {
  clear_t();
  if (interpreted) {
    set_has_interpreted();
    t_.interpreted_ = interpreted;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Server_Protocol.Command.interpreted)
}
inline ::Server_Protocol::Command_Interpreted* Command::_internal_mutable_interpreted() {
  if (!_internal_has_interpreted()) {
    clear_t();
    set_has_interpreted();
    t_.interpreted_ = CreateMaybeMessage< ::Server_Protocol::Command_Interpreted >(GetArenaForAllocation());
  }
  return t_.interpreted_;
}
inline ::Server_Protocol::Command_Interpreted* Command::mutable_interpreted() {
  ::Server_Protocol::Command_Interpreted* _msg = _internal_mutable_interpreted();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.interpreted)
  return _msg;
}

// .Server_Protocol.Command.File save = 7;
inline bool Command::_internal_has_save() const {
  return t_case() == kSave;
}
inline bool Command::has_save() const {
  return _internal_has_save();
}
inline void Command::set_has_save() {
  _oneof_case_[0] = kSave;
}
inline void Command::clear_save() {
  if (_internal_has_save()) {
    if (GetArenaForAllocation() == nullptr) {
      delete t_.save_;
    }
    clear_has_t();
  }
}
inline ::Server_Protocol::Command_File* Command::release_save() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.save)
  if (_internal_has_save()) {
    clear_has_t();
    ::Server_Protocol::Command_File* temp = t_.save_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    t_.save_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Server_Protocol::Command_File& Command::_internal_save() const {
  return _internal_has_save()
      ? *t_.save_
      : reinterpret_cast< ::Server_Protocol::Command_File&>(::Server_Protocol::_Command_File_default_instance_);
}
inline const ::Server_Protocol::Command_File& Command::save() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.save)
  return _internal_save();
}
inline ::Server_Protocol::Command_File* Command::unsafe_arena_release_save() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Server_Protocol.Command.save)
  if (_internal_has_save()) {
    clear_has_t();
    ::Server_Protocol::Command_File* temp = t_.save_;
    t_.save_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_save(::Server_Protocol::Command_File* save) {
  clear_t();
  if (save) {
    set_has_save();
    t_.save_ = save;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Server_Protocol.Command.save)
}
inline ::Server_Protocol::Command_File* Command::_internal_mutable_save() {
  if (!_internal_has_save()) {
    clear_t();
    set_has_save();
    t_.save_ = CreateMaybeMessage< ::Server_Protocol::Command_File >(GetArenaForAllocation());
  }
  return t_.save_;
}
inline ::Server_Protocol::Command_File* Command::mutable_save() {
  ::Server_Protocol::Command_File* _msg = _internal_mutable_save();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.save)
  return _msg;
}

// .Server_Protocol.Command.File load = 8;
inline bool Command::_internal_has_load() const {
  return t_case() == kLoad;
}
inline bool Command::has_load() const {
  return _internal_has_load();
}
inline void Command::set_has_load() {
  _oneof_case_[0] = kLoad;
}
inline void Command::clear_load() {
  if (_internal_has_load()) {
    if (GetArenaForAllocation() == nullptr) {
      delete t_.load_;
    }
    clear_has_t();
  }
}
inline ::Server_Protocol::Command_File* Command::release_load() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.load)
  if (_internal_has_load()) {
    clear_has_t();
    ::Server_Protocol::Command_File* temp = t_.load_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    t_.load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Server_Protocol::Command_File& Command::_internal_load() const {
  return _internal_has_load()
      ? *t_.load_
      : reinterpret_cast< ::Server_Protocol::Command_File&>(::Server_Protocol::_Command_File_default_instance_);
}
inline const ::Server_Protocol::Command_File& Command::load() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.load)
  return _internal_load();
}
inline ::Server_Protocol::Command_File* Command::unsafe_arena_release_load() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Server_Protocol.Command.load)
  if (_internal_has_load()) {
    clear_has_t();
    ::Server_Protocol::Command_File* temp = t_.load_;
    t_.load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_load(::Server_Protocol::Command_File* load) {
  clear_t();
  if (load) {
    set_has_load();
    t_.load_ = load;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Server_Protocol.Command.load)
}
inline ::Server_Protocol::Command_File* Command::_internal_mutable_load() {
  if (!_internal_has_load()) {
    clear_t();
    set_has_load();
    t_.load_ = CreateMaybeMessage< ::Server_Protocol::Command_File >(GetArenaForAllocation());
  }
  return t_.load_;
}
inline ::Server_Protocol::Command_File* Command::mutable_load() {
  ::Server_Protocol::Command_File* _msg = _internal_mutable_load();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.load)
  return _msg;
}

// .Server_Protocol.Command.First_order first_order = 9;
inline bool Command::_internal_has_first_order() const {
  return t_case() == kFirstOrder;
}
inline bool Command::has_first_order() const {
  return _internal_has_first_order();
}
inline void Command::set_has_first_order() {
  _oneof_case_[0] = kFirstOrder;
}
inline void Command::clear_first_order() {
  if (_internal_has_first_order()) {
    if (GetArenaForAllocation() == nullptr) {
      delete t_.first_order_;
    }
    clear_has_t();
  }
}
inline ::Server_Protocol::Command_First_order* Command::release_first_order() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.first_order)
  if (_internal_has_first_order()) {
    clear_has_t();
    ::Server_Protocol::Command_First_order* temp = t_.first_order_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    t_.first_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Server_Protocol::Command_First_order& Command::_internal_first_order() const {
  return _internal_has_first_order()
      ? *t_.first_order_
      : reinterpret_cast< ::Server_Protocol::Command_First_order&>(::Server_Protocol::_Command_First_order_default_instance_);
}
inline const ::Server_Protocol::Command_First_order& Command::first_order() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.first_order)
  return _internal_first_order();
}
inline ::Server_Protocol::Command_First_order* Command::unsafe_arena_release_first_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Server_Protocol.Command.first_order)
  if (_internal_has_first_order()) {
    clear_has_t();
    ::Server_Protocol::Command_First_order* temp = t_.first_order_;
    t_.first_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_first_order(::Server_Protocol::Command_First_order* first_order) {
  clear_t();
  if (first_order) {
    set_has_first_order();
    t_.first_order_ = first_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Server_Protocol.Command.first_order)
}
inline ::Server_Protocol::Command_First_order* Command::_internal_mutable_first_order() {
  if (!_internal_has_first_order()) {
    clear_t();
    set_has_first_order();
    t_.first_order_ = CreateMaybeMessage< ::Server_Protocol::Command_First_order >(GetArenaForAllocation());
  }
  return t_.first_order_;
}
inline ::Server_Protocol::Command_First_order* Command::mutable_first_order() {
  ::Server_Protocol::Command_First_order* _msg = _internal_mutable_first_order();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.first_order)
  return _msg;
}

// .Server_Protocol.Command.Notation notation = 10;
inline bool Command::_internal_has_notation() const {
  return t_case() == kNotation;
}
inline bool Command::has_notation() const {
  return _internal_has_notation();
}
inline void Command::set_has_notation() {
  _oneof_case_[0] = kNotation;
}
inline void Command::clear_notation() {
  if (_internal_has_notation()) {
    if (GetArenaForAllocation() == nullptr) {
      delete t_.notation_;
    }
    clear_has_t();
  }
}
inline ::Server_Protocol::Command_Notation* Command::release_notation() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.notation)
  if (_internal_has_notation()) {
    clear_has_t();
    ::Server_Protocol::Command_Notation* temp = t_.notation_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    t_.notation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Server_Protocol::Command_Notation& Command::_internal_notation() const {
  return _internal_has_notation()
      ? *t_.notation_
      : reinterpret_cast< ::Server_Protocol::Command_Notation&>(::Server_Protocol::_Command_Notation_default_instance_);
}
inline const ::Server_Protocol::Command_Notation& Command::notation() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.notation)
  return _internal_notation();
}
inline ::Server_Protocol::Command_Notation* Command::unsafe_arena_release_notation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Server_Protocol.Command.notation)
  if (_internal_has_notation()) {
    clear_has_t();
    ::Server_Protocol::Command_Notation* temp = t_.notation_;
    t_.notation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_notation(::Server_Protocol::Command_Notation* notation) {
  clear_t();
  if (notation) {
    set_has_notation();
    t_.notation_ = notation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Server_Protocol.Command.notation)
}
inline ::Server_Protocol::Command_Notation* Command::_internal_mutable_notation() {
  if (!_internal_has_notation()) {
    clear_t();
    set_has_notation();
    t_.notation_ = CreateMaybeMessage< ::Server_Protocol::Command_Notation >(GetArenaForAllocation());
  }
  return t_.notation_;
}
inline ::Server_Protocol::Command_Notation* Command::mutable_notation() {
  ::Server_Protocol::Command_Notation* _msg = _internal_mutable_notation();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.notation)
  return _msg;
}

// .Server_Protocol.Command.Theorem theorem = 11;
inline bool Command::_internal_has_theorem() const {
  return t_case() == kTheorem;
}
inline bool Command::has_theorem() const {
  return _internal_has_theorem();
}
inline void Command::set_has_theorem() {
  _oneof_case_[0] = kTheorem;
}
inline void Command::clear_theorem() {
  if (_internal_has_theorem()) {
    if (GetArenaForAllocation() == nullptr) {
      delete t_.theorem_;
    }
    clear_has_t();
  }
}
inline ::Server_Protocol::Command_Theorem* Command::release_theorem() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.theorem)
  if (_internal_has_theorem()) {
    clear_has_t();
    ::Server_Protocol::Command_Theorem* temp = t_.theorem_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    t_.theorem_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Server_Protocol::Command_Theorem& Command::_internal_theorem() const {
  return _internal_has_theorem()
      ? *t_.theorem_
      : reinterpret_cast< ::Server_Protocol::Command_Theorem&>(::Server_Protocol::_Command_Theorem_default_instance_);
}
inline const ::Server_Protocol::Command_Theorem& Command::theorem() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.theorem)
  return _internal_theorem();
}
inline ::Server_Protocol::Command_Theorem* Command::unsafe_arena_release_theorem() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Server_Protocol.Command.theorem)
  if (_internal_has_theorem()) {
    clear_has_t();
    ::Server_Protocol::Command_Theorem* temp = t_.theorem_;
    t_.theorem_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_theorem(::Server_Protocol::Command_Theorem* theorem) {
  clear_t();
  if (theorem) {
    set_has_theorem();
    t_.theorem_ = theorem;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Server_Protocol.Command.theorem)
}
inline ::Server_Protocol::Command_Theorem* Command::_internal_mutable_theorem() {
  if (!_internal_has_theorem()) {
    clear_t();
    set_has_theorem();
    t_.theorem_ = CreateMaybeMessage< ::Server_Protocol::Command_Theorem >(GetArenaForAllocation());
  }
  return t_.theorem_;
}
inline ::Server_Protocol::Command_Theorem* Command::mutable_theorem() {
  ::Server_Protocol::Command_Theorem* _msg = _internal_mutable_theorem();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.theorem)
  return _msg;
}

// .Server_Protocol.Command.Axiom axiom = 12;
inline bool Command::_internal_has_axiom() const {
  return t_case() == kAxiom;
}
inline bool Command::has_axiom() const {
  return _internal_has_axiom();
}
inline void Command::set_has_axiom() {
  _oneof_case_[0] = kAxiom;
}
inline void Command::clear_axiom() {
  if (_internal_has_axiom()) {
    if (GetArenaForAllocation() == nullptr) {
      delete t_.axiom_;
    }
    clear_has_t();
  }
}
inline ::Server_Protocol::Command_Axiom* Command::release_axiom() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.axiom)
  if (_internal_has_axiom()) {
    clear_has_t();
    ::Server_Protocol::Command_Axiom* temp = t_.axiom_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    t_.axiom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Server_Protocol::Command_Axiom& Command::_internal_axiom() const {
  return _internal_has_axiom()
      ? *t_.axiom_
      : reinterpret_cast< ::Server_Protocol::Command_Axiom&>(::Server_Protocol::_Command_Axiom_default_instance_);
}
inline const ::Server_Protocol::Command_Axiom& Command::axiom() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.axiom)
  return _internal_axiom();
}
inline ::Server_Protocol::Command_Axiom* Command::unsafe_arena_release_axiom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Server_Protocol.Command.axiom)
  if (_internal_has_axiom()) {
    clear_has_t();
    ::Server_Protocol::Command_Axiom* temp = t_.axiom_;
    t_.axiom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_axiom(::Server_Protocol::Command_Axiom* axiom) {
  clear_t();
  if (axiom) {
    set_has_axiom();
    t_.axiom_ = axiom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Server_Protocol.Command.axiom)
}
inline ::Server_Protocol::Command_Axiom* Command::_internal_mutable_axiom() {
  if (!_internal_has_axiom()) {
    clear_t();
    set_has_axiom();
    t_.axiom_ = CreateMaybeMessage< ::Server_Protocol::Command_Axiom >(GetArenaForAllocation());
  }
  return t_.axiom_;
}
inline ::Server_Protocol::Command_Axiom* Command::mutable_axiom() {
  ::Server_Protocol::Command_Axiom* _msg = _internal_mutable_axiom();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.axiom)
  return _msg;
}

// .Server_Protocol.Command.History history = 13;
inline bool Command::_internal_has_history() const {
  return t_case() == kHistory;
}
inline bool Command::has_history() const {
  return _internal_has_history();
}
inline void Command::set_has_history() {
  _oneof_case_[0] = kHistory;
}
inline void Command::clear_history() {
  if (_internal_has_history()) {
    if (GetArenaForAllocation() == nullptr) {
      delete t_.history_;
    }
    clear_has_t();
  }
}
inline ::Server_Protocol::Command_History* Command::release_history() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.history)
  if (_internal_has_history()) {
    clear_has_t();
    ::Server_Protocol::Command_History* temp = t_.history_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    t_.history_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Server_Protocol::Command_History& Command::_internal_history() const {
  return _internal_has_history()
      ? *t_.history_
      : reinterpret_cast< ::Server_Protocol::Command_History&>(::Server_Protocol::_Command_History_default_instance_);
}
inline const ::Server_Protocol::Command_History& Command::history() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.history)
  return _internal_history();
}
inline ::Server_Protocol::Command_History* Command::unsafe_arena_release_history() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Server_Protocol.Command.history)
  if (_internal_has_history()) {
    clear_has_t();
    ::Server_Protocol::Command_History* temp = t_.history_;
    t_.history_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_history(::Server_Protocol::Command_History* history) {
  clear_t();
  if (history) {
    set_has_history();
    t_.history_ = history;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Server_Protocol.Command.history)
}
inline ::Server_Protocol::Command_History* Command::_internal_mutable_history() {
  if (!_internal_has_history()) {
    clear_t();
    set_has_history();
    t_.history_ = CreateMaybeMessage< ::Server_Protocol::Command_History >(GetArenaForAllocation());
  }
  return t_.history_;
}
inline ::Server_Protocol::Command_History* Command::mutable_history() {
  ::Server_Protocol::Command_History* _msg = _internal_mutable_history();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.history)
  return _msg;
}

// string show = 14;
inline bool Command::_internal_has_show() const {
  return t_case() == kShow;
}
inline bool Command::has_show() const {
  return _internal_has_show();
}
inline void Command::set_has_show() {
  _oneof_case_[0] = kShow;
}
inline void Command::clear_show() {
  if (_internal_has_show()) {
    t_.show_.Destroy();
    clear_has_t();
  }
}
inline const std::string& Command::show() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.show)
  return _internal_show();
}
template <typename ArgT0, typename... ArgT>
inline void Command::set_show(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_show()) {
    clear_t();
    set_has_show();
    t_.show_.InitDefault();
  }
  t_.show_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.show)
}
inline std::string* Command::mutable_show() {
  std::string* _s = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.show)
  return _s;
}
inline const std::string& Command::_internal_show() const {
  if (_internal_has_show()) {
    return t_.show_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Command::_internal_set_show(const std::string& value) {
  if (!_internal_has_show()) {
    clear_t();
    set_has_show();
    t_.show_.InitDefault();
  }
  t_.show_.Set(value, GetArenaForAllocation());
}
inline std::string* Command::_internal_mutable_show() {
  if (!_internal_has_show()) {
    clear_t();
    set_has_show();
    t_.show_.InitDefault();
  }
  return t_.show_.Mutable(      GetArenaForAllocation());
}
inline std::string* Command::release_show() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.show)
  if (_internal_has_show()) {
    clear_has_t();
    return t_.show_.Release();
  } else {
    return nullptr;
  }
}
inline void Command::set_allocated_show(std::string* show) {
  if (has_t()) {
    clear_t();
  }
  if (show != nullptr) {
    set_has_show();
    t_.show_.InitAllocated(show, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:Server_Protocol.Command.show)
}

// .Server_Protocol.Known list = 15;
inline bool Command::_internal_has_list() const {
  return t_case() == kList;
}
inline bool Command::has_list() const {
  return _internal_has_list();
}
inline void Command::set_has_list() {
  _oneof_case_[0] = kList;
}
inline void Command::clear_list() {
  if (_internal_has_list()) {
    t_.list_ = 0;
    clear_has_t();
  }
}
inline ::Server_Protocol::Known Command::_internal_list() const {
  if (_internal_has_list()) {
    return static_cast< ::Server_Protocol::Known >(t_.list_);
  }
  return static_cast< ::Server_Protocol::Known >(0);
}
inline ::Server_Protocol::Known Command::list() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.list)
  return _internal_list();
}
inline void Command::_internal_set_list(::Server_Protocol::Known value) {
  if (!_internal_has_list()) {
    clear_t();
    set_has_list();
  }
  t_.list_ = value;
}
inline void Command::set_list(::Server_Protocol::Known value) {
  _internal_set_list(value);
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.list)
}

// string user = 16;
inline bool Command::_internal_has_user() const {
  return t_case() == kUser;
}
inline bool Command::has_user() const {
  return _internal_has_user();
}
inline void Command::set_has_user() {
  _oneof_case_[0] = kUser;
}
inline void Command::clear_user() {
  if (_internal_has_user()) {
    t_.user_.Destroy();
    clear_has_t();
  }
}
inline const std::string& Command::user() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline void Command::set_user(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_user()) {
    clear_t();
    set_has_user();
    t_.user_.InitDefault();
  }
  t_.user_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Server_Protocol.Command.user)
}
inline std::string* Command::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.user)
  return _s;
}
inline const std::string& Command::_internal_user() const {
  if (_internal_has_user()) {
    return t_.user_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Command::_internal_set_user(const std::string& value) {
  if (!_internal_has_user()) {
    clear_t();
    set_has_user();
    t_.user_.InitDefault();
  }
  t_.user_.Set(value, GetArenaForAllocation());
}
inline std::string* Command::_internal_mutable_user() {
  if (!_internal_has_user()) {
    clear_t();
    set_has_user();
    t_.user_.InitDefault();
  }
  return t_.user_.Mutable(      GetArenaForAllocation());
}
inline std::string* Command::release_user() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.user)
  if (_internal_has_user()) {
    clear_has_t();
    return t_.user_.Release();
  } else {
    return nullptr;
  }
}
inline void Command::set_allocated_user(std::string* user) {
  if (has_t()) {
    clear_t();
  }
  if (user != nullptr) {
    set_has_user();
    t_.user_.InitAllocated(user, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:Server_Protocol.Command.user)
}

// .Server_Protocol.Command.Quit quit = 17;
inline bool Command::_internal_has_quit() const {
  return t_case() == kQuit;
}
inline bool Command::has_quit() const {
  return _internal_has_quit();
}
inline void Command::set_has_quit() {
  _oneof_case_[0] = kQuit;
}
inline void Command::clear_quit() {
  if (_internal_has_quit()) {
    if (GetArenaForAllocation() == nullptr) {
      delete t_.quit_;
    }
    clear_has_t();
  }
}
inline ::Server_Protocol::Command_Quit* Command::release_quit() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Command.quit)
  if (_internal_has_quit()) {
    clear_has_t();
    ::Server_Protocol::Command_Quit* temp = t_.quit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    t_.quit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Server_Protocol::Command_Quit& Command::_internal_quit() const {
  return _internal_has_quit()
      ? *t_.quit_
      : reinterpret_cast< ::Server_Protocol::Command_Quit&>(::Server_Protocol::_Command_Quit_default_instance_);
}
inline const ::Server_Protocol::Command_Quit& Command::quit() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Command.quit)
  return _internal_quit();
}
inline ::Server_Protocol::Command_Quit* Command::unsafe_arena_release_quit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Server_Protocol.Command.quit)
  if (_internal_has_quit()) {
    clear_has_t();
    ::Server_Protocol::Command_Quit* temp = t_.quit_;
    t_.quit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_quit(::Server_Protocol::Command_Quit* quit) {
  clear_t();
  if (quit) {
    set_has_quit();
    t_.quit_ = quit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Server_Protocol.Command.quit)
}
inline ::Server_Protocol::Command_Quit* Command::_internal_mutable_quit() {
  if (!_internal_has_quit()) {
    clear_t();
    set_has_quit();
    t_.quit_ = CreateMaybeMessage< ::Server_Protocol::Command_Quit >(GetArenaForAllocation());
  }
  return t_.quit_;
}
inline ::Server_Protocol::Command_Quit* Command::mutable_quit() {
  ::Server_Protocol::Command_Quit* _msg = _internal_mutable_quit();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Command.quit)
  return _msg;
}

inline bool Command::has_t() const {
  return t_case() != T_NOT_SET;
}
inline void Command::clear_has_t() {
  _oneof_case_[0] = T_NOT_SET;
}
inline Command::TCase Command::t_case() const {
  return Command::TCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Answer_Error

// string error_message = 1;
inline void Answer_Error::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& Answer_Error::error_message() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Answer.Error.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Answer_Error::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Server_Protocol.Answer.Error.error_message)
}
inline std::string* Answer_Error::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Answer.Error.error_message)
  return _s;
}
inline const std::string& Answer_Error::_internal_error_message() const {
  return error_message_.Get();
}
inline void Answer_Error::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* Answer_Error::_internal_mutable_error_message() {
  
  return error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* Answer_Error::release_error_message() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Answer.Error.error_message)
  return error_message_.Release();
}
inline void Answer_Error::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault()) {
    error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Server_Protocol.Answer.Error.error_message)
}

// .Server_Protocol.Command command = 2;
inline bool Answer_Error::_internal_has_command() const {
  return this != internal_default_instance() && command_ != nullptr;
}
inline bool Answer_Error::has_command() const {
  return _internal_has_command();
}
inline void Answer_Error::clear_command() {
  if (GetArenaForAllocation() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
}
inline const ::Server_Protocol::Command& Answer_Error::_internal_command() const {
  const ::Server_Protocol::Command* p = command_;
  return p != nullptr ? *p : reinterpret_cast<const ::Server_Protocol::Command&>(
      ::Server_Protocol::_Command_default_instance_);
}
inline const ::Server_Protocol::Command& Answer_Error::command() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Answer.Error.command)
  return _internal_command();
}
inline void Answer_Error::unsafe_arena_set_allocated_command(
    ::Server_Protocol::Command* command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  command_ = command;
  if (command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Server_Protocol.Answer.Error.command)
}
inline ::Server_Protocol::Command* Answer_Error::release_command() {
  
  ::Server_Protocol::Command* temp = command_;
  command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Server_Protocol::Command* Answer_Error::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Answer.Error.command)
  
  ::Server_Protocol::Command* temp = command_;
  command_ = nullptr;
  return temp;
}
inline ::Server_Protocol::Command* Answer_Error::_internal_mutable_command() {
  
  if (command_ == nullptr) {
    auto* p = CreateMaybeMessage<::Server_Protocol::Command>(GetArenaForAllocation());
    command_ = p;
  }
  return command_;
}
inline ::Server_Protocol::Command* Answer_Error::mutable_command() {
  ::Server_Protocol::Command* _msg = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Answer.Error.command)
  return _msg;
}
inline void Answer_Error::set_allocated_command(::Server_Protocol::Command* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete command_;
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(command);
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    
  } else {
    
  }
  command_ = command;
  // @@protoc_insertion_point(field_set_allocated:Server_Protocol.Answer.Error.command)
}

// -------------------------------------------------------------------

// Answer_Latex_answer

// .Server_Protocol.Latex_mode mode = 1;
inline void Answer_Latex_answer::clear_mode() {
  mode_ = 0;
}
inline ::Server_Protocol::Latex_mode Answer_Latex_answer::_internal_mode() const {
  return static_cast< ::Server_Protocol::Latex_mode >(mode_);
}
inline ::Server_Protocol::Latex_mode Answer_Latex_answer::mode() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Answer.Latex_answer.mode)
  return _internal_mode();
}
inline void Answer_Latex_answer::_internal_set_mode(::Server_Protocol::Latex_mode value) {
  
  mode_ = value;
}
inline void Answer_Latex_answer::set_mode(::Server_Protocol::Latex_mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:Server_Protocol.Answer.Latex_answer.mode)
}

// string answer = 2;
inline void Answer_Latex_answer::clear_answer() {
  answer_.ClearToEmpty();
}
inline const std::string& Answer_Latex_answer::answer() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Answer.Latex_answer.answer)
  return _internal_answer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Answer_Latex_answer::set_answer(ArgT0&& arg0, ArgT... args) {
 
 answer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Server_Protocol.Answer.Latex_answer.answer)
}
inline std::string* Answer_Latex_answer::mutable_answer() {
  std::string* _s = _internal_mutable_answer();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Answer.Latex_answer.answer)
  return _s;
}
inline const std::string& Answer_Latex_answer::_internal_answer() const {
  return answer_.Get();
}
inline void Answer_Latex_answer::_internal_set_answer(const std::string& value) {
  
  answer_.Set(value, GetArenaForAllocation());
}
inline std::string* Answer_Latex_answer::_internal_mutable_answer() {
  
  return answer_.Mutable(GetArenaForAllocation());
}
inline std::string* Answer_Latex_answer::release_answer() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Answer.Latex_answer.answer)
  return answer_.Release();
}
inline void Answer_Latex_answer::set_allocated_answer(std::string* answer) {
  if (answer != nullptr) {
    
  } else {
    
  }
  answer_.SetAllocated(answer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (answer_.IsDefault()) {
    answer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Server_Protocol.Answer.Latex_answer.answer)
}

// -------------------------------------------------------------------

// Answer

// .Server_Protocol.Command ok = 1;
inline bool Answer::_internal_has_ok() const {
  return t_case() == kOk;
}
inline bool Answer::has_ok() const {
  return _internal_has_ok();
}
inline void Answer::set_has_ok() {
  _oneof_case_[0] = kOk;
}
inline void Answer::clear_ok() {
  if (_internal_has_ok()) {
    if (GetArenaForAllocation() == nullptr) {
      delete t_.ok_;
    }
    clear_has_t();
  }
}
inline ::Server_Protocol::Command* Answer::release_ok() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Answer.ok)
  if (_internal_has_ok()) {
    clear_has_t();
    ::Server_Protocol::Command* temp = t_.ok_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    t_.ok_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Server_Protocol::Command& Answer::_internal_ok() const {
  return _internal_has_ok()
      ? *t_.ok_
      : reinterpret_cast< ::Server_Protocol::Command&>(::Server_Protocol::_Command_default_instance_);
}
inline const ::Server_Protocol::Command& Answer::ok() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Answer.ok)
  return _internal_ok();
}
inline ::Server_Protocol::Command* Answer::unsafe_arena_release_ok() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Server_Protocol.Answer.ok)
  if (_internal_has_ok()) {
    clear_has_t();
    ::Server_Protocol::Command* temp = t_.ok_;
    t_.ok_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Answer::unsafe_arena_set_allocated_ok(::Server_Protocol::Command* ok) {
  clear_t();
  if (ok) {
    set_has_ok();
    t_.ok_ = ok;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Server_Protocol.Answer.ok)
}
inline ::Server_Protocol::Command* Answer::_internal_mutable_ok() {
  if (!_internal_has_ok()) {
    clear_t();
    set_has_ok();
    t_.ok_ = CreateMaybeMessage< ::Server_Protocol::Command >(GetArenaForAllocation());
  }
  return t_.ok_;
}
inline ::Server_Protocol::Command* Answer::mutable_ok() {
  ::Server_Protocol::Command* _msg = _internal_mutable_ok();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Answer.ok)
  return _msg;
}

// .Server_Protocol.Answer.Error error = 2;
inline bool Answer::_internal_has_error() const {
  return t_case() == kError;
}
inline bool Answer::has_error() const {
  return _internal_has_error();
}
inline void Answer::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void Answer::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete t_.error_;
    }
    clear_has_t();
  }
}
inline ::Server_Protocol::Answer_Error* Answer::release_error() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Answer.error)
  if (_internal_has_error()) {
    clear_has_t();
    ::Server_Protocol::Answer_Error* temp = t_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    t_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Server_Protocol::Answer_Error& Answer::_internal_error() const {
  return _internal_has_error()
      ? *t_.error_
      : reinterpret_cast< ::Server_Protocol::Answer_Error&>(::Server_Protocol::_Answer_Error_default_instance_);
}
inline const ::Server_Protocol::Answer_Error& Answer::error() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Answer.error)
  return _internal_error();
}
inline ::Server_Protocol::Answer_Error* Answer::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Server_Protocol.Answer.error)
  if (_internal_has_error()) {
    clear_has_t();
    ::Server_Protocol::Answer_Error* temp = t_.error_;
    t_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Answer::unsafe_arena_set_allocated_error(::Server_Protocol::Answer_Error* error) {
  clear_t();
  if (error) {
    set_has_error();
    t_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Server_Protocol.Answer.error)
}
inline ::Server_Protocol::Answer_Error* Answer::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_t();
    set_has_error();
    t_.error_ = CreateMaybeMessage< ::Server_Protocol::Answer_Error >(GetArenaForAllocation());
  }
  return t_.error_;
}
inline ::Server_Protocol::Answer_Error* Answer::mutable_error() {
  ::Server_Protocol::Answer_Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Answer.error)
  return _msg;
}

// .Server_Protocol.Answer.Latex_answer answer = 3;
inline bool Answer::_internal_has_answer() const {
  return t_case() == kAnswer;
}
inline bool Answer::has_answer() const {
  return _internal_has_answer();
}
inline void Answer::set_has_answer() {
  _oneof_case_[0] = kAnswer;
}
inline void Answer::clear_answer() {
  if (_internal_has_answer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete t_.answer_;
    }
    clear_has_t();
  }
}
inline ::Server_Protocol::Answer_Latex_answer* Answer::release_answer() {
  // @@protoc_insertion_point(field_release:Server_Protocol.Answer.answer)
  if (_internal_has_answer()) {
    clear_has_t();
    ::Server_Protocol::Answer_Latex_answer* temp = t_.answer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    t_.answer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Server_Protocol::Answer_Latex_answer& Answer::_internal_answer() const {
  return _internal_has_answer()
      ? *t_.answer_
      : reinterpret_cast< ::Server_Protocol::Answer_Latex_answer&>(::Server_Protocol::_Answer_Latex_answer_default_instance_);
}
inline const ::Server_Protocol::Answer_Latex_answer& Answer::answer() const {
  // @@protoc_insertion_point(field_get:Server_Protocol.Answer.answer)
  return _internal_answer();
}
inline ::Server_Protocol::Answer_Latex_answer* Answer::unsafe_arena_release_answer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Server_Protocol.Answer.answer)
  if (_internal_has_answer()) {
    clear_has_t();
    ::Server_Protocol::Answer_Latex_answer* temp = t_.answer_;
    t_.answer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Answer::unsafe_arena_set_allocated_answer(::Server_Protocol::Answer_Latex_answer* answer) {
  clear_t();
  if (answer) {
    set_has_answer();
    t_.answer_ = answer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Server_Protocol.Answer.answer)
}
inline ::Server_Protocol::Answer_Latex_answer* Answer::_internal_mutable_answer() {
  if (!_internal_has_answer()) {
    clear_t();
    set_has_answer();
    t_.answer_ = CreateMaybeMessage< ::Server_Protocol::Answer_Latex_answer >(GetArenaForAllocation());
  }
  return t_.answer_;
}
inline ::Server_Protocol::Answer_Latex_answer* Answer::mutable_answer() {
  ::Server_Protocol::Answer_Latex_answer* _msg = _internal_mutable_answer();
  // @@protoc_insertion_point(field_mutable:Server_Protocol.Answer.answer)
  return _msg;
}

inline bool Answer::has_t() const {
  return t_case() != T_NOT_SET;
}
inline void Answer::clear_has_t() {
  _oneof_case_[0] = T_NOT_SET;
}
inline Answer::TCase Answer::t_case() const {
  return Answer::TCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Server_Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Server_Protocol::File_mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Server_Protocol::File_mode>() {
  return ::Server_Protocol::File_mode_descriptor();
}
template <> struct is_proto_enum< ::Server_Protocol::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Server_Protocol::Status>() {
  return ::Server_Protocol::Status_descriptor();
}
template <> struct is_proto_enum< ::Server_Protocol::Known> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Server_Protocol::Known>() {
  return ::Server_Protocol::Known_descriptor();
}
template <> struct is_proto_enum< ::Server_Protocol::Latex_mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Server_Protocol::Latex_mode>() {
  return ::Server_Protocol::Latex_mode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_5fprotocol_2eproto
